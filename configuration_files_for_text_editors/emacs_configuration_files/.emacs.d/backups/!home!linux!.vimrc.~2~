" REQUIRED. This makes vim invoke Latex-Suite when you open a tex file.
filetype plugin on

" Allow changing the buffer without saving.
" set hidden
"
" For multi-byte character support (CJK support, for example):
"set fileencodings=ucs-bom,utf-8,cp936,big5,euc-jp,euc-kr,gb18030,latin1

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

"set dir=~/.tmp                        " répertoire des fichiers temporaires
set ff=unix                           " suppression des ^M
set wrapscan                          " recherche en rond
set title                             " modifier le titre du terminal

" number of undos
set undolevels=200

set smarttab

let g:Imap_UsePlaceHolders = 0

"fullscreen
"if has("gui_running")
"  set guioptions=aiA " Disable toolbar, menu bar, scroll bars
"endif " has("gui_running") 
""or fullscreen
  :set go-=m go-=T go-=l go-=L go-=r go-=R go-=b go-=F
  :set lines=999 columns=999

" Set to auto read when a file is changed from the outside
set autoread

" IMPORTANT: win32 users will need to have 'shellslash' set so that latex
" can be called correctly.
" set shellslash
 
 "" Curseur à l'ancienne position
function! s:CursorOldPosition()
  if line("'\"") > 0 && line("'\"") <= line("$")
    exec "normal g`\""
  endif
endfunction

autocmd BufReadPost * silent! call s:CursorOldPosition()

function! LoadTemplate(name, extension)
  echohl Todo
  echo a:name
  echohl None
  let bou = expand('%:e')
  silent! execute '0r ' . $HOME . '/.vim/template/' . bou . '.tpl'
  silent! execute 'source ' . $HOME . '/.vim/template/autocompletion.vim'
endfunction
 
 " searching
set hlsearch        " When there is a previous search pattern, highlight all
                    " its matches.
set incsearch       " While typing a search command, show immediately where the
                    " so far typed pattern matches.
set ignorecase      " Ignore case in search patterns.
set smartcase       " Override the 'ignorecase' option if

set formatoptions=c,q,r,t " This is a sequence of letters which describes how
                    " automatic formatting is to be done.
                    "
                    " letter    meaning when present in 'formatoptions'
                    " ------    ---------------------------------------
                    " c         Auto-wrap comments using textwidth, inserting
                    "           the current comment leader automatically.
                    " q         Allow formatting of comments with "gq".
                    " r         Automatically insert the current comment leader
                    "           after hitting <Enter> in Insert mode. 
                    " t         Auto-wrap text using textwidth (does not apply
                    "           to comments)
                    
" shortcut for formatting paragraph
map	<C-J>	gqap
imap	<C-J>	<C-O>gqap
vmap	<C-J>	gq

" Some people prefer to use extrernal formatting utilities
" such as "fmt" or "par":
"nmap	<C-J>	!}fmt<CR>
"vmap	<C-J>	!fmt<CR>

" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse Latex-Suite. Set your grep
" program to alway generate a file-name.
set grepprg=grep\ -nH\ $*
 
" make F11 "copy into clipboard"
":map <F11> "*y
 
" make F12 "paste from clipboard"
":map <F12> "*p
 
" write four spaces instead of tab
set tabstop=4
set shiftwidth=4
set expandtab
set softtabstop=4   " make the four spaces feel like a tab
 
" OPTIONAL: This enables automatic indentation as you type.
filetype indent on
set autoindent smartindent      " turn on auto/smart indenting

" switch on syntax highlight
"ing, use fortran free form
":let fortran_free_source=1
syntax on
 
"Personnalisation de la ligne de status
set statusline=%F%m%r%h%w\ [TYPE=%Y]\ [Line=%04l]\ [Col=%04v]\ [%p%%]
set laststatus=2

" met en surbrillance les espaces et les tabs en trop
highlight RedundantSpaces ctermbg=red guibg=red
match RedundantSpaces /\s\+$\| \+\ze\t\|\t/
" For all text files set 'textwidth' to 80 characters.
  autocmd FileType text setlocal textwidth=80

" visual bell?
set novisualbell
set t_vb=

" shortcut for formatting paragraph
map	<C-J>	gqap
imap	<C-J>	<C-O>gqap
vmap	<C-J>	gq

" Some people prefer to use extrernal formatting utilities
" such as "fmt" or "par":
"nmap	<C-J>	!}fmt<CR>
"vmap	<C-J>	!fmt<CR>

" custom status line
"hi User1 ctermfg=red   ctermbg=white
"hi User2 ctermfg=green ctermbg=white
"hi User3 ctermfg=blue  ctermbg=white
"set statusline=%1*[%02n]%*\ %2*%F%*\ %(\ %M%R%H)%)%=%3*Pos=<%l,%c%V>%*
 
" Permet de se repérer dans les parenthèses & Co.
set showmatch

" Functions
" " =========
"
 " Output ISO date.
 function s:RD_isodate ()
 return strftime("%Y-%m-%d %H:%M:%S %z")
 endfunction
"
 " Function to insert the current date
    function! InsertCurrentDate()
        let curr_date=strftime('%Y-%m-%d', localtime())
            silent! exec 'normal! gi' .  curr_date . "\<ESC>l"
              endfunction
 "

" Superbe menu de complétion \o/
set wildmenu
set wildignore=*.o,*~,*.cmo,*.cmi,*.a,*.cmx,*.cmxa

"Autorisation de remonter ou descendre d'une ligne avec les flèches
"gauche ou droite
set whichwrap=b,s,<,>,[,]
 
" Enable the ruler with the format:
" " {buffer number}{modified/readonly flag}: {file type} [current line,
" current column] {position percentage in file}
set ruler
set rulerformat=%25(%n%m%r:\ %Y\ [%l,%v]\ %p%%%)
"
" line numbering
set number
 
" wrap at word
set lbr
 
" nice colours
colorscheme habilight
colors habilight
 
set enc=utf-8

" ---------------------------------------------------------------------------
" spelling...
set spell

" correction orthographique
map <silent> <F7> "<Esc>:silent setlocal spell! spelllang=fr<CR>"
map <silent> <F8> "<Esc>:silent setlocal spell! spelllang=en<CR>"

if v:version >= 700
  let b:lastspelllang='en'
  function! ToggleSpell()
    if &spell == 1
      let b:lastspelllang=&spelllang
      setlocal spell!
    elseif b:lastspelllang
      setlocal spell spelllang=b:lastspelllang
    else
      setlocal spell spelllang=en
    endif
  endfunction

  nmap <LocalLeader>ss :call ToggleSpell()<CR>

  setlocal spell spelllang=en
  setlocal nospell
endif

augroup END

set mousemodel=popup
set spellfile=~/.spellfile.add

"set winheight=999               " maximize split windows
"set winminheight=0              " completely hide other windws

" ---------------------------------------------------------------------------
" mouse settings
set mouse=a                     " mouse support in all modes
set mousehide                   " hide the mouse when typing text

" make tab in v mode keep highlighting
vmap <tab> >gv
vmap <s-tab> <gv
 
function! SetupLatex(arg)
    if a:arg == 'pdf'
        let a:targetformat = 'pdf'
    elseif a:arg == 'dvi'
        let a:targetformat = 'dvi'
    elseif a:arg == ''
        if g:Tex_DefaultTargetFormat == 'dvi'
            let a:targetformat = 'pdf'
        else
            let a:targetformat = 'dvi'
        endif
    endif
 
    if a:targetformat == 'dvi'
        " target for latex
        let g:Tex_DefaultTargetFormat = 'dvi'
        " inverse search -- start gvim as "gvim --servername xdvi"
        "let g:Tex_CompileRule_dvi = 'latex --src -interaction nonstopmode $*'
        "let g:Tex_CompileRule_dvi = 'latex --src -interaction nonstopmode $*; if pgrep -fx "xdvi.bin -name xdvi -editor gvim --servername vim --remote +%l %f $*"; then wmctrl -a "xdvik:  $*"; fi;'
        let g:Tex_CompileRule_dvi = 'latex --src -interaction nonstopmode $*; if pgrep "xdvi.bin"; then wmctrl -a "xdvik:"; fi;'
        let g:Tex_ViewRule_dvi = 'xdvi -editor "gvim --servername vim --remote +\%l \%f" -watchfile 1 $* &'
        map \ld :execute '!xdvi -editor "gvim --servername '.v:servername.' --remote +\%l \%f" -sourceposition '.line(".").':'.col(".").expand("%").' '.expand(Tex_GetMainFileName(':r')).'.dvi >/dev/null&'<CR><CR>
    else " pdf
        let g:Tex_DefaultTargetFormat = 'pdf'
        let g:Tex_CompileRule_pdf = 'pdflatex -interaction nonstopmode $*; if pgrep -fx "xpdf -remote vimlatex $*.pdf"; then xpdf -remote vimlatex -reload && wmctrl -a "Xpdf: $*.pdf"; fi;'
        "let g:Tex_CompileRule_pdf = 'pdflatex -interaction nonstopmode $*; if pgrep -fx "xpdf -remote vimlatex $*.pdf"; then xpdf -remote vimlatex -reload -raise; fi;'
        let g:Tex_CompileRule_pdf = 'pdflatex -interaction nonstopmode $*; if pgrep -fx "xpdf -remote vimlatex $*.pdf"; then xpdf -remote vimlatex -reload && wmctrl -a "Xpdf: $*.pdf"; fi;'
        let g:Tex_ViewRule_pdf = 'xpdf -remote vimlatex'
    endif
endfunction
 
if exists("myTeXtarget")
    :call SetupLatex(myTeXtarget)
    let g:Tex_MultipleCompileFormats = 'dvi,pdf'
 
    " include cross referenced references also if they are cross referenced less
    " than two times
    let g:Tex_BibtexFlavor = 'bibtex -min-crossrefs=1'
    " let the cursor in the tex buffer if an error occured
    let g:Tex_GotoError = 0
    let g:Tex_IgnoredWarnings =
                \'Underfull'."\n".
                \'Overfull'."\n".
                \'specifier changed to'."\n".
                \'You have requested'."\n".
                \'Missing number, treated as zero.'."\n".
                \'There were undefined references'."\n".
                \'Latex Warning:'."\n".
                \'LaTeX Warning:' " float stuck
                "\'Citation %.%# undefined'
    let g:Tex_IgnoreLevel = 8
endif
 
" manual folding
set foldmethod=marker
"set commentstring=\ #\ %s
 
" to cycle with ctrl-N trough all labels
set iskeyword+=:
 
" Sauvegarde rapide du fichier actuel
map <F2> :w<CR>
imap <F2> <ESC>:w<CR>

" Terminal
map <S-F2> :!xterm &<CR><CR>
imap <S-F2> <ESC>:!xterm &<CR><CR>

" Gestionnaire de fichiers graphique
map <F2>t :!pcmanfm & <CR><CR>
map <F2>t <ESC>:!pcmanfm &<CR><CR>

" UCS Transformation Format 8 bits : léger et universel
set encoding=utf-8
" Support all three, in this order
" set fileformats=unix,dos,mac

" Backups
" set backup
" set backupcopy=auto

set guifont=DejaVu\ Sans\ Mono\ 8
let s:fullscreen_toggle = 0

" Sets how many lines of history VIM has to remember
set history=300


set nocompatible    " use vim defaults

""""""""""""""""""""""""""""""
" => bufExplorer plugin
" """"""""""""""""""""""""""""""
 let g:bufExplorerDefaultHelp=0
 let g:bufExplorerShowRelativePath=1
"
"
" """"""""""""""""""""""""""""""
" " => Minibuffer plugin
" """"""""""""""""""""""""""""""
 let g:miniBufExplModSelTarget = 1
 let g:miniBufExplorerMoreThanOne = 2
 let g:miniBufExplModSelTarget = 0
 let g:miniBufExplUseSingleClick = 1
 let g:miniBufExplMapWindowNavVim = 1
 let g:miniBufExplVSplit = 25
 let g:miniBufExplSplitBelow=1
"
 let g:bufExplorerSortBy = "name"
"
 autocmd BufRead,BufNew :call UMiniBufExplorer
"
 map <leader>u :TMiniBufExplorer<cr>:TMiniBufExplorer<cr>

" control-left & right arrows switch between tabs
map <c-Left> :tabp<CR>
map <c-Right> :tabn<CR>
 
" keep at least 5 lines above/below cursor
set scrolloff=5
 
" show me where i am
set cursorline

 " Hide the mouse pointer while typing
  set mousehide

"" Racourcis à la firefox
map <C-t>     :tabnew<cr>
map <C-left>  :tabnext<cr>
map <C-right> :tabprevious<cr>
map <C-o> :e
 
" completion http://vim.wikia.com/wiki/Omni_completion
"
" Scanning included files is really slow for Perl files
" " Maybe I should change this only for Perl files
" set complete-=i 
"
set ofu=syntaxcomplete#Complete
" http://vim.wikia.com/wiki/VimTip1386
set completeopt=longest,menuone
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
  \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
inoremap <expr> <M-,> pumvisible() ? '<C-n>' :
  \ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
" instead of control x control o: tab http://vim.wikia.com/wiki/VimTip102
function! CleverTab()
    if pumvisible()
        return "\<C-N>"
    endif
    if strpart( getline('.'), 0, col('.')-1 ) =~ '^\s*$'
        return "\<Tab>"
    elseif exists('&omnifunc') && &omnifunc != ''
        return "\<C-X>\<C-O>"
    else
        return "\<C-N>"
    endif
endfunction
inoremap <Tab> <C-R>=CleverTab()<CR>

" ---------------------------------------------------------------------------
"  configure calendar
let g:calendar_monday = 1

"------------------------------------------------------------------------------
"----------------------------------------------------------------------------
" Vim indent file
" mpg-customized
"
" Language: LaTeX
" Was:      http://www.unet.univie.ac.at/~a9925098/vim/indent/tex.vim
"

if exists("b:did_indent") | finish
endif
let b:did_indent = 1

setlocal indentexpr=GetTeXIndent()
setlocal nolisp
setlocal nosmartindent
setlocal autoindent
setlocal indentkeys+=},=\\item,=\\bibitem,=\\else,=\\fi,=\\or,=\\]

" Only define the function once
if exists("*GetTeXIndent") | finish
endif

function GetTeXIndent()

  " Find a non-blank line above the current line.
  let lnum = prevnonblank(v:lnum - 1)

  " At the start of the file use zero indent.
  if lnum == 0
    return 0
  endif

  let ind = indent(lnum)
  let line = getline(lnum)             " last line
  let cline = getline(v:lnum)          " current line

  " Remove the commented part of the lines
  let line = substitute(line, '%.*$', '', '')
  let cline = substitute(cline, '%.*$', '', '')

  " Add a 'shiftwidth' after beginning of environments.
  " Don't add it for \begin{document}, \begin{verbatim}, etc.
  if line =~ '\\begin{'  && line !~ 'verbatim'
        \ && line !~ 'document' && line !~ 'lstlisting'

    let  ind += &sw

  endif

  " Subtract a 'shiftwidth' when an environment ends
  if cline =~ '\\end{' && cline !~ 'verbatim'
        \&& cline !~ 'document' && cline !~ 'lstlisting'

    let  ind -= &sw

    " Remove another sw for item-environments
    if cline =~ 'itemize\|description\|enum\|thebibliography'
      let  ind -= &sw
    endif

  endif

  " Same for short display math environment \[ ... \]
  if line =~ '\\\['
    let ind += &sw
  endif

  if cline =~ '\\\]'
    let ind -= &sw
  endif

  " Special treatment for 'item'
  " ----------------------------

  " '\item' or '\bibitem' itself:
  if cline =~ '^\s*\\\(bib\)\=item' && line !~ '^\s*\\begin{'
    let  ind -= &sw
  endif

  " lines following to '\item' are intented once again:
  if line =~ '^\s*\\\(bib\)\=item'
    let  ind += &sw
  endif

  " Special treatment for 'if' constructs
  " -------------------------------------

  if line =~ '^\s*\(\\if\|\\expandafter\\if\|\\else\>\|\\or\>\)'
              \ && line !~ '\\fi\>'
    let ind += &sw
  endif

  if cline =~ '^\s*\(\\else\>\|\\or\>\|\\fi\>\)'
    let ind -= &sw
  endif

  " { and } (must be done at end, since it modifies line)
  " -------

  let line = substitute(line, '\\{\|\\}', '', 'g')
  let ind += &sw * strlen(substitute(line, '[^{]', '', 'g'))
              \ - &sw * strlen(substitute(line, '[^}]', '', 'g'))

  return ind

endfunction

" vim: set sw=2 ts=2: 

" This function nicely wraps a selection within quotes, curly braces, square
" brackets, angle brackets, tags and more.
function s:RD_wrapper (str) range
	let l:allowed_strs = {
				\ '"' : ['"', '"'],
				\ "'" : ["'", "'"],
				\ '{' : ['{', '}'],
				\ '(' : ['(', ')'],
				\ '[' : ['[', ']'],
				\ '`' : ['`', '`'],
				\ '<' : ['<', '>'],
				\ 't' : ['', '']
				\ }

	if has_key(l:allowed_strs, a:str) != 1
		echohl ErrorMsg
		echo 'Unknown wrapper: "' . a:str . '".'
		echohl None

		return 0
	endif

	" Wrap the selection with a tag.
	if a:str == 't'
		let l:tname = inputdialog('Tag name: ')
		if strlen(l:tname) < 1
			return 0
		endif
		let l:allowed_strs[a:str][0] = '<' . l:tname . '>'
		let l:allowed_strs[a:str][1] = '</' . l:tname . '>'
	endif

	let l:prefix = l:allowed_strs[a:str][0]
	let l:suffix = l:allowed_strs[a:str][1]
	let l:lenp = strlen(l:prefix)

	let l:old_x = @x
	let l:old_reg = @"

	let @x = l:prefix
	normal `<"xP
	let l:line1 = line('.')

	normal `>
	let l:line2 = line('.')

	if l:line1 == l:line2
		exe 'normal ' . lenp . 'l'
	endif

	let @x = l:suffix
	normal "xp

	" If we are wrapping the selection with a tag, lets put the cursor exactly
	" where the user can just press 'i' to start writing the attributes.
	if a:str == 't'
		normal h%h%
	endif

	let @x = l:old_x
	let @" = l:old_reg

	return 1
endfunction


" Similar to the RD_wrapper function, this one removes the quotes, curly
" braces, etc.
function s:RD_unwrapper () range
	let l:allowed_strs = ['"', "'", '{', '}', '(', ')', '[', ']', '`', '<', '>']
	let l:xml_types = ['xhtml', 'html', 'xml']
	let l:str = strpart(getline('.'), col('.') - 1, 1)

	if index(l:allowed_strs, l:str) == -1

		" If this is a known XML/SGML file type, then try to strip the current
		" tag
		if index(l:xml_types, &filetype) != -1
			return <SID>RD_unwrap_tag()
		endif

		echohl ErrorMsg
		echo 'The character under the cursor was not recognized: "' . l:str . '"'
		echohl None

		return 0
	endif

	let l:old_x = @x
	let l:old_reg = @"

	exe 'normal vi' . l:str . 'v'

	normal `<X
	let l:line1 = line('.')

	normal `>
	let l:line2 = line('.')
	if(l:line1 != l:line2)
		normal l
	endif
	normal x

	let @x = l:old_x
	let @" = l:old_reg

	return 1
endfunction

