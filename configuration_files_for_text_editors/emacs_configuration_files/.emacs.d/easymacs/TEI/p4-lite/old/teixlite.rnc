default namespace = ""
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace s = "http://www.ascc.net/xml/schematron"

div {
  # include "/TEI/web/P5/Schema/Lite.rng"
  div {
    eg |=
      element eg {
        attributes.class.global,
        [ a:defaultValue = "eg" ] attribute TEIform { text }?,
        text*
      }
    gi =
      element gi {
        attributes.class.global,
        [ a:defaultValue = "yes" ] attribute TEI { "yes" | "no" }?,
        [ a:defaultValue = "gi" ] attribute TEIform { text }?,
        text*
      }
    code =
      element code {
        attributes.class.global,
        attribute type { text }?,
        [ a:defaultValue = "code" ] attribute TEIform { text }?,
        text*
      }
    kw =
      element kw {
        attributes.class.global,
        [ a:defaultValue = "kw" ] attribute TEIform { text }?,
        text*
      }
    ident =
      element ident {
        attributes.class.global,
        attribute type { text }?,
        [ a:defaultValue = "ident" ] attribute TEIform { text }?,
        text*
      }
    class.data |= code
    class.data |= gi
    class.data |= kw
    class.data |= ident
    class.data |= eg
    class.common |= eg
  }
}
div {
  # include "/TEI/web/P5/Schema/tei.rng"
  div {
    # Text Encoding Initiative Consortium:
    # Guidelines for Electronic Text Encoding and Interchange.
    # TEI P5 (unofficial)
    # Copyright (c) 2003 TEI Consortium. Permission to copy in any form
    # is granted, provided this notice is included in all copies.
    # These materials may not be altered; modifications to these schemata should
    # be performed only as specified by the Guidelines, for example in the
    # chapter entitled 'Modifying the TEI DTD'
    # These materials are subject to revision by the TEI Consortium. Current versions
    # are available from the Consortium website at http://www.tei-c.org
    # TEI P5 Relax NG Schema generated 
    # 2004-01-27T14:25:20Z
    # by relaxGen.xsl.
    start = TEI.2 | teiCorpus.2
    IGNORE = notAllowed
    INCLUDE = empty
    # Weird special cases
    TEI...end = notAllowed
    mix.dictionaries |= notAllowed
    mix.drama |= notAllowed
    mix.spoken |= notAllowed
    mix.verse |= notAllowed
    class.comp.dictionaries |= notAllowed
    class.comp.spoken |= notAllowed
    class.comp.verse |= notAllowed
    attributes.class.pointer |= notAllowed
    class.comp.terminology = notAllowed
    mix.terminology |= notAllowed
    attributes.class.linking |= empty
    attributes.class.analysis |= empty
    attributes.class.enjamb |= empty
    attributes.class.metrical |= empty
    # [DSTTEI2] 3.6.1: File tei2.dtd:  Main document type declaration file
    
    # This file first defines some useful entities, then defines the
    # element TEI and includes files with the various specialized parts of
    # the document type declaration.  It also declares the top-level TEI
    # and teiCorpus.2 elements.
    
    # I.  Preliminaries.
    
    # Embed any local modifications to TEI entities.
    
    # [DSTOVLE] 3.6.2: Local modifications to parameter entities
    
    # Embed local modifications to TEI parameter entities.  Declare
    # entity as empty string first, in case user has no mods and has not
    # declared it.
    
    #  end of [DSTOVLE]  3.6.2
    
    # Embed entities for TEI generic identifiers.
    
    # Define entities for TEI keywords.
    
    # This includes defining the default for each base and additional
    # tag set as 'IGNORE', and initialising the tag omissibility indicator
    # entities depending on the value of TEI.XML
    
    # [DSTPEKW] 3.8.5: TEI Keywords
    
    # We declare and immediately embed the TEI keywords file.
    div {
      # include "teikeywords.rng"
      div {
        # Text Encoding Initiative Consortium:
        # Guidelines for Electronic Text Encoding and Interchange.
        # TEI P5 (unofficial)
        # Copyright (c) 2003 TEI Consortium. Permission to copy in any form
        # is granted, provided this notice is included in all copies.
        # These materials may not be altered; modifications to these schemata should
        # be performed only as specified by the Guidelines, for example in the
        # chapter entitled 'Modifying the TEI DTD'
        # These materials are subject to revision by the TEI Consortium. Current versions
        # are available from the Consortium website at http://www.tei-c.org
        # TEI P5 Relax NG Schema generated 
        # 2004-01-27T14:25:20Z
        # by relaxGen.xsl.
        
        # [DSTKEYS] 3.8.5: TEI Keywords
        
        # I.  Declare TEI keywords for data types.
        
        # These parameter entities are used as keywords to express
        # rules or constraints which cannot be fully expressed in attribute declarations; their
        # expansions show the nearest available equivalent.
        datatype.AnyURI = xsd:anyURI
        datatype.Boolean = xsd:boolean
        datatype.Certainty = text
        datatype.Code = text
        datatype.Date = xsd:date
        datatype.DateTime = xsd:dateTime
        datatype.Duration = xsd:duration
        datatype.Entities = xsd:ENTITIES
        datatype.Entity = xsd:ENTITY
        datatype.Extptr = text
        datatype.Float = xsd:decimal
        datatype.ID = xsd:ID
        datatype.IDref = xsd:IDREF
        datatype.IDrefs = xsd:IDREFS
        datatype.Key = text
        datatype.Language = text
        datatype.Name = xsd:NCName
        datatype.NonNegativeInteger = xsd:nonNegativeInteger
        datatype.NMtoken = xsd:NMTOKEN
        datatype.NMtokens = xsd:NMTOKENS
        datatype.Sex = "m" | "f" | "u" | "x"
        datatype.Text = text
        datatype.Time = xsd:time
        datatype.Token = text
        datatype.UBoolean = "true" | "false" | "unknown" | "unspecified"
        # II.  Declare keywords for tag-set selection.
        
        # Declare all bases and additional tag sets as IGNORE.  The
        # user can override this default by declaring the same entity with the
        # replacement text INCLUDE, in the document's DTD
        # subset.
        
        # Base tag sets first.
        TEI.prose = IGNORE
        TEI.verse = IGNORE
        TEI.drama = IGNORE
        TEI.spoken = IGNORE
        TEI.dictionaries = IGNORE
        TEI.terminology = IGNORE
        # Now the mixed bases.
        TEI.general = IGNORE
        TEI.mixed = IGNORE
        # Now additional tag sets.
        TEI.linking = IGNORE
        TEI.analysis = IGNORE
        TEI.fs = IGNORE
        TEI.certainty = IGNORE
        TEI.transcr = IGNORE
        TEI.textcrit = IGNORE
        TEI.names.dates = IGNORE
        TEI.tagdocs = IGNORE
        TEI.nets = IGNORE
        TEI.figures = IGNORE
        TEI.corpus = IGNORE
        # III. Declare TEI.XML and associated omissibility indicators
        TEI.XML = IGNORE
        #  end of [DSTKEYS]  3.8.5
        
      }
    }
    #  end of [DSTPEKW]  3.8.5
    
    # II. Define element classes for content models, shared
    # attributes for element classes, and global attributes.  (This all
    # happens within the file TEIclas2.ent.)
    div {
      # include "teiclasses.rng"
      div {
        # Text Encoding Initiative Consortium:
        # Guidelines for Electronic Text Encoding and Interchange.
        # TEI P5 (unofficial)
        # Copyright (c) 2003 TEI Consortium. Permission to copy in any form
        # is granted, provided this notice is included in all copies.
        # These materials may not be altered; modifications to these schemata should
        # be performed only as specified by the Guidelines, for example in the
        # chapter entitled 'Modifying the TEI DTD'
        # These materials are subject to revision by the TEI Consortium. Current versions
        # are available from the Consortium website at http://www.tei-c.org
        # TEI P5 Relax NG Schema generated 
        # 2004-01-27T14:25:20Z
        # by relaxGen.xsl.
        
        # [DSTECOV] 3.7.3: Element classes for TEI DTDs
        
        # First, we declare the 'low-level' core classes:
        # these are classes of semantically and structurally similar elements
        # declared as part of the core tag set, e.g. the classes 'data' or
        # 'edit'.
        
        # [DSTECLO] 3.7.4: Low-level classes
        
        # Most of these elements are in the core tag set, but
        # some may be from other tag sets.
        
        # Phrase-level classes
        class.teiHeader |= notAllowed
        class.teiText |= notAllowed
        class.hqphrase |= notAllowed
        class.phrase |= class.hqphrase
        class.date |= notAllowed
        class.data |= notAllowed
        class.phrase |= class.data
        class.edit |= notAllowed
        class.phrase |= class.edit
        class.loc |= notAllowed
        class.phrase |= class.loc
        class.seg |= notAllowed
        class.phrase |= class.seg
        class.phrase.verse |= notAllowed
        class.phrase |= class.phrase.verse
        class.formPointers |= notAllowed
        class.phrase |= class.formPointers
        class.metadata |= notAllowed
        class.Incl |= class.metadata
        class.refsys |= notAllowed
        class.Incl |= class.refsys
        class.editIncl |= notAllowed
        class.Incl |= class.editIncl
        class.Incl |= notAllowed
        class.oddDecl |= notAllowed
        class.chunk |= class.oddDecl
        class.oddRef |= notAllowed
        class.chunk |= class.oddRef
        class.oddPhr |= notAllowed
        class.phrase |= class.oddPhr
        # Inter-level classes
        class.hqinter |= notAllowed
        class.inter |= class.hqinter
        class.common |= class.hqinter
        class.bibl |= notAllowed
        class.inter |= class.bibl
        class.common |= class.bibl
        class.lists |= notAllowed
        class.inter |= class.lists
        class.common |= class.lists
        class.notes |= notAllowed
        class.inter |= class.notes
        class.common |= class.notes
        class.stageDirection |= notAllowed
        class.comp.drama |= class.stageDirection
        class.inter |= class.stageDirection
        #  end of [DSTECLO]  3.7.4
        
        # [DSTECMI] 3.7.9: Misc. Element Class Models
        class.agent |= notAllowed
        class.addrPart |= notAllowed
        class.biblPart |= notAllowed
        class.demographic |= notAllowed
        class.divbot |= notAllowed
        class.divtop |= notAllowed
        class.dramafront |= notAllowed
        class.front |= class.dramafront
        class.front |= notAllowed
        class.personPart |= notAllowed
        class.placePart |= notAllowed
        class.tpParts |= notAllowed
        class.fmchunk |= notAllowed
        #  end of [DSTECMI]  3.7.9
        
        # Next, we declare the 'high-level' classes: these group
        # together all phrase-level elements, all inter-level elements, and all
        # chunk-level elements in the core, and identify the 'common' component
        # elements (chunks and inter-level elements), as opposed to the
        # tagset-specific components.
        
        # [DSTECHI] 3.7.5: Common high-level classes
        
        # These
        # are the fundamental element classes.
        class.phrase |= notAllowed
        class.inter |= notAllowed
        class.chunk |= notAllowed
        class.common |= class.chunk
        class.segment |= notAllowed
        class.paragraph |= notAllowed
        # This class isolates all the common component-level elements.
        class.common |= notAllowed
        #  end of [DSTECHI]  3.7.5
        
        # Next, we embed the portions of each base and additional tag
        # set which declare relevant parameter entities. Only those files are
        # embedded which have been selected by the user in the DTD subset. These
        # files will declare parameter entities for their component-level
        # elements, as well as for any global attributes they define.
        
        # [DSTECMK] 3.7.6: Embedding tag-set-specific entity definitions
        
        #  end of [DSTECMK]  3.7.6
        
        # We can now declare the standard content models; one of these
        # varies with the base selected.
        
        # [DSTECST] 3.7.7: Standard Content Models
        
        # Here we declare the parameter entities phrase, macro.phraseSeq,
        # component, macro.componentSeq, macro.paraContent, and macro.specialPara, for use in the
        # content models of element declarations.  The entities phrase and
        # macro.phraseSeq are the same in all bases.  They may include elements
        # specific to single tag sets; if the tag set is not selected, these
        # elements are undefined and have no effect.
        macro.phrasegroup = text | class.phrase | class.Incl
        macro.phraseSeq = macro.phrasegroup*
        # The entity component varies with the base.  The
        # versions for the combined bases are declared first (so as to
        # take precedence over the declarations in the individual
        # bases).
        
        # [DSTECMX] 3.7.8: Definition of components for combined bases
        
        # Default declarations for the 'mix.' entities used for mixed
        # and general bases.
        gen.verse =
          class.comp.verse | (class.common | class.comp.verse)*
        gen.drama =
          class.comp.drama | (class.common | class.comp.drama)*
        gen.spoken =
          class.comp.spoken | (class.common | class.comp.spoken)*
        gen.dictionaries =
          class.comp.dictionaries
          | (class.common | class.comp.dictionaries)*
        gen.terminology =
          class.comp.terminology
          | (class.common | class.comp.terminology)*
        macro.componentPlus |=
          class.common+
          | (gen.verse,
             gen.drama,
             gen.spoken,
             gen.dictionaries,
             gen.terminology)?
        #  end of [DSTECMX]  3.7.8
        macro.component |= class.common
        # Default declaration.
        
        # The entity macro.componentSeq is always a starred sequence of
        # component elements.  Its definition does not vary with the base (unless
        # we are using the general base, in which case it has already been defined
        # above), but the meaning of the definition does.
        macro.componentSeq |= (macro.component, class.Incl*)*
        # The following entities do not vary with the base.
        macro.paraContent =
          (text | class.phrase | class.inter | class.Incl)*
        macro.specialPara =
          (text
           | class.phrase
           | class.inter
           | class.chunk
           | class.Incl)*
        #  end of [DSTECST]  3.7.7
        
        # Finally, we declare the attribute classes, including
        # the global attributes.
        
        # [DSTECAT] 3.7.1: Attribute classes
        attributes.class.declaring |=
          attribute decls { datatype.IDrefs }?
        attributes.class.declarable |=
          [ a:defaultValue = "false" ]
          attribute default { datatype.Boolean }?
        attributes.class.typed |=
          attribute type { datatype.Text }?,
          attribute subtype { datatype.Text }?
        attributes.class.interpret |=
          attribute resp { datatype.Text }?,
          attribute type { datatype.Text }?,
          attribute inst { datatype.IDrefs }?
        attributes.class.divn |=
          attributes.class.metrical,
          attribute type { values.class.divn.type }?,
          [ a:defaultValue = "uniform" ]
          attribute org { "composite" | "uniform" }?,
          [ a:defaultValue = "complete" ]
          attribute sample {
            "initial" | "medial" | "final" | "unknown" | "complete"
          }?,
          [ a:defaultValue = "N" ]
          attribute part { "Y" | "N" | "I" | "M" | "F" }?
        values.class.divn.type |= text
        attributes.class.names |=
          attribute key { datatype.Text }?,
          attribute reg { datatype.Text }?
        attributes.class.seg |=
          attributes.class.metrical,
          attribute type { datatype.Key }?,
          attribute function { datatype.Text }?,
          [ a:defaultValue = "N" ]
          attribute part { "Y" | "N" | "I" | "M" | "F" }?
        attributes.class.timed |=
          attribute start { datatype.IDref }?,
          attribute end { datatype.IDref }?,
          attribute dur { datatype.Text }?
        attributes.class.xPointer |=
          attributes.class.pointer,
          attribute doc { datatype.Entity }?,
          attribute url { datatype.AnyURI }?,
          [ a:defaultValue = "ROOT" ]
          attribute from { datatype.Extptr }?,
          [ a:defaultValue = "DITTO" ] attribute to { datatype.Extptr }?
        #  end of [DSTECAT]  3.7.1
        
        # [DSTGA] 3.5: Global attributes
        
        # The global attributes are defined for every element in the TEI
        # tag set; individual declarations may be overridden by local declarations
        # for individual elements.
        
        # If the tag sets invoked by the user define extra global
        # attributes (they do this in their .ent file), then they are inherited by
        # GLOBAL; otherwise the parameter entities referred to expand to the empty
        # string, as shown here.
        attributes.class.global |=
          attributes.class.linking,
          attributes.class.analysis,
          attribute id { datatype.ID }?,
          attribute n { datatype.Text }?,
          attribute lang { datatype.IDref }?,
          attribute rend { values.class.global.rend }?
        values.class.global.rend |= text
        # The TEIform attribute is also global, but is declared
        # individually for each element, not in a parameter entity
        # declaration.
        
        #  end of [DSTGA]  3.5
        
        #  end of [DSTECOV]  3.7.3
        
      }
    }
    # III.  Define the top-level TEI elements:  one for individual
    # texts, one for composites with a collective header.
    
    # A TEI document is a text preceded by a TEI header.
    TEI.2 = element TEI { content.TEI }
    content.TEI.2 = attributes.TEI, (class.teiHeader, class.teiText)
    attributes.TEI =
      attributes.class.global,
      [ a:defaultValue = "5.0" ] attribute version { text }?,
      [ a:defaultValue = "TEI.2" ] attribute TEIform { text }?
    # A TEI corpus is a series of TEI documents, preceded by a
    # corpus-level TEI header.
    teiCorpus.2 = element teiCorpus.2 { content.teiCorpus.2 }
    content.teiCorpus.2 = attributes.teiCorpus.2, (teiHeader, TEI+)
    attributes.teiCorpus.2 =
      attributes.class.global,
      [ a:defaultValue = "teiCorpus.2" ] attribute TEIform { text }?
    # IV.  Embed the actual tag sets.  First embed any local
    # modifications and extensions.  Then embed the core tag sets, the
    # (single) base tag set, and the (optional) additional tag sets specified
    # by the user.
    
    # [DSTOVLO] 3.6.2: Embed local element declarations, etc.
    
    # Embedding local modifications here allows user modifications
    # to use all the standard TEI element classes and parameter entities.
    
    #  end of [DSTOVLO]  3.6.2
    
    # [DSTOVCO] 3.6.3: Embed the core tag sets
    
    # These occur in all documents and are therefore defined
    # unconditionally.
    div {
      # include "header.rng"
      div {
        # Text Encoding Initiative Consortium:
        # Guidelines for Electronic Text Encoding and Interchange.
        # TEI P5 (unofficial)
        # Copyright (c) 2003 TEI Consortium. Permission to copy in any form
        # is granted, provided this notice is included in all copies.
        # These materials may not be altered; modifications to these schemata should
        # be performed only as specified by the Guidelines, for example in the
        # chapter entitled 'Modifying the TEI DTD'
        # These materials are subject to revision by the TEI Consortium. Current versions
        # are available from the Consortium website at http://www.tei-c.org
        # TEI P5 Relax NG Schema generated 
        # 2004-01-27T14:25:17Z
        # by relaxGen.xsl.
        
        # [D221] 5.1.1: The TEI Header
        
        # header.dtd  Tags for TEI Header.
        class.header |= notAllowed
        teiHeader = element teiHeader { content.teiHeader }
        content.teiHeader =
          attributes.teiHeader, (fileDesc, class.header*, revisionDesc?)
        attributes.teiHeader =
          attributes.class.global,
          [ a:defaultValue = "text" ] attribute type { datatype.Text }?,
          attribute creator { datatype.Text }?,
          [ a:defaultValue = "new" ]
          attribute status { "new" | "update" }?,
          attribute date.created { datatype.Date }?,
          attribute date.updated { datatype.Date }?,
          [ a:defaultValue = "teiHeader" ] attribute TEIform { text }?
        class.teiHeader |= teiHeader
        # [D221B] 5.1.1:
        
        # [D222] 5.2: The file description
        fileDesc = element fileDesc { content.fileDesc }
        content.fileDesc =
          attributes.fileDesc,
          (titleStmt,
           editionStmt?,
           extent?,
           publicationStmt,
           seriesStmt?,
           notesStmt?,
           sourceDesc+)
        attributes.fileDesc =
          attributes.class.global,
          [ a:defaultValue = "fileDesc" ] attribute TEIform { text }?
        # [D2221] 5.2.1: The title statement
        titleStmt = element titleStmt { content.titleStmt }
        content.titleStmt =
          attributes.titleStmt,
          (title+,
           (author | editor | sponsor | funder | principal | respStmt)*)
        attributes.titleStmt =
          attributes.class.global,
          [ a:defaultValue = "titleStmt" ] attribute TEIform { text }?
        sponsor = element sponsor { content.sponsor }
        content.sponsor = attributes.sponsor, macro.phraseSeq
        attributes.sponsor =
          attributes.class.global,
          [ a:defaultValue = "sponsor" ] attribute TEIform { text }?
        funder = element funder { content.funder }
        content.funder = attributes.funder, macro.phraseSeq
        attributes.funder =
          attributes.class.global,
          [ a:defaultValue = "funder" ] attribute TEIform { text }?
        principal = element principal { content.principal }
        content.principal = attributes.principal, macro.phraseSeq
        attributes.principal =
          attributes.class.global,
          [ a:defaultValue = "principal" ] attribute TEIform { text }?
        # The TITLE, AUTHOR, NAME, RESPSTMT, and RESP elements are
        # declared in file teicore2.dtd, not here.
        
        #  end of [D2221]  5.2.1
        
        # [D2222] 5.2.2: The edition statement
        editionStmt = element editionStmt { content.editionStmt }
        content.editionStmt =
          attributes.editionStmt,
          ((edition, respStmt*) | p+)
        attributes.editionStmt =
          attributes.class.global,
          [ a:defaultValue = "editionStmt" ] attribute TEIform { text }?
        edition = element edition { content.edition }
        content.edition = attributes.edition, macro.phraseSeq
        attributes.edition =
          attributes.class.global,
          [ a:defaultValue = "edition" ] attribute TEIform { text }?
        class.biblPart |= edition
        #  end of [D2222]  5.2.2
        
        # [D2223] 5.2.3: The extent statement
        extent = element extent { content.extent }
        content.extent = attributes.extent, macro.phraseSeq
        attributes.extent =
          attributes.class.global,
          [ a:defaultValue = "extent" ] attribute TEIform { text }?
        class.biblPart |= extent
        #  end of [D2223]  5.2.3
        
        # [D2224] 5.2.4: The publication statement
        publicationStmt =
          element publicationStmt { content.publicationStmt }
        content.publicationStmt =
          attributes.publicationStmt,
          ((p, class.Incl*)+
           | ((publisher
               | distributor
               | authority
               | pubPlace
               | address
               | idno
               | availability
               | date),
              class.Incl*)+)
        attributes.publicationStmt =
          attributes.class.global,
          [ a:defaultValue = "publicationStmt" ]
          attribute TEIform { text }?
        distributor = element distributor { content.distributor }
        content.distributor = attributes.distributor, macro.phraseSeq
        attributes.distributor =
          attributes.class.global,
          [ a:defaultValue = "distributor" ] attribute TEIform { text }?
        authority = element authority { content.authority }
        content.authority = attributes.authority, macro.phraseSeq
        attributes.authority =
          attributes.class.global,
          [ a:defaultValue = "authority" ] attribute TEIform { text }?
        idno = element idno { content.idno }
        content.idno = attributes.idno, text
        attributes.idno =
          attributes.class.global,
          attribute type { datatype.Text }?,
          [ a:defaultValue = "idno" ] attribute TEIform { text }?
        class.biblPart |= idno
        availability = element availability { content.availability }
        content.availability = attributes.availability, class.paragraph+
        attributes.availability =
          attributes.class.global,
          [ a:defaultValue = "unknown" ]
          attribute status { "free" | "unknown" | "restricted" }?,
          [ a:defaultValue = "availability" ]
          attribute TEIform { text }?
        # The PUBLISHER, PUBPLACE, and ADDRESS elements
        # are defined in file teicore2.dtd.
        
        #  end of [D2224]  5.2.4
        
        # [D2225] 5.2.5: The series statement
        seriesStmt = element seriesStmt { content.seriesStmt }
        content.seriesStmt =
          attributes.seriesStmt,
          ((title+, (idno | respStmt)*)
           | p+)
        attributes.seriesStmt =
          attributes.class.global,
          [ a:defaultValue = "seriesStmt" ] attribute TEIform { text }?
        #  end of [D2225]  5.2.5
        
        # [D2226] 5.2.6: The notes statement
        notesStmt = element notesStmt { content.notesStmt }
        content.notesStmt = attributes.notesStmt, note+
        attributes.notesStmt =
          attributes.class.global,
          [ a:defaultValue = "notesStmt" ] attribute TEIform { text }?
        # The NOTE element is defined with the core tags.
        
        #  end of [D2226]  5.2.6
        
        #  end of [D222]  5.2
        
        # [D223] 5.2.7: The source description
        sourceDesc = element sourceDesc { content.sourceDesc }
        content.sourceDesc =
          attributes.sourceDesc,
          (p
           | bibl
           | biblFull
           | biblStruct
           | listBibl
           | scriptStmt
           | recordingStmt)+
        attributes.sourceDesc =
          attributes.class.global,
          attributes.class.declarable,
          [ a:defaultValue = "sourceDesc" ] attribute TEIform { text }?
        # [D2231] 5.2.9: Script statement and recording statement
        scriptStmt = element scriptStmt { content.scriptStmt }
        content.scriptStmt =
          attributes.scriptStmt, (p+ | bibl | biblFull | biblStruct)
        attributes.scriptStmt =
          attributes.class.global,
          attributes.class.declarable,
          [ a:defaultValue = "scriptStmt" ] attribute TEIform { text }?
        recordingStmt = element recordingStmt { content.recordingStmt }
        content.recordingStmt =
          attributes.recordingStmt, (p+ | recording+)
        attributes.recordingStmt =
          attributes.class.global,
          [ a:defaultValue = "recordingStmt" ]
          attribute TEIform { text }?
        recording = element recording { content.recording }
        content.recording =
          attributes.recording,
          (p+ | (respStmt | equipment | broadcast | date)*)
        attributes.recording =
          attributes.class.global,
          attributes.class.declarable,
          [ a:defaultValue = "audio" ]
          attribute type { "audio" | "video" }?,
          attribute dur { datatype.Duration }?,
          [ a:defaultValue = "recording" ] attribute TEIform { text }?
        equipment = element equipment { content.equipment }
        content.equipment = attributes.equipment, class.paragraph+
        attributes.equipment =
          attributes.class.global,
          attributes.class.declarable,
          [ a:defaultValue = "equipment" ] attribute TEIform { text }?
        broadcast = element broadcast { content.broadcast }
        content.broadcast =
          attributes.broadcast,
          (p+ | bibl | biblStruct | biblFull | recording)
        attributes.broadcast =
          attributes.class.global,
          attributes.class.declarable,
          [ a:defaultValue = "broadcast" ] attribute TEIform { text }?
        #  end of [D2231]  5.2.9
        
        #  end of [D223]  5.2.7
        
        # [D225] 5.3: The encoding description
        class.encoding |= notAllowed
        encodingDesc = element encodingDesc { content.encodingDesc }
        content.encodingDesc =
          attributes.encodingDesc, (class.encoding*, p*)
        attributes.encodingDesc =
          attributes.class.global,
          [ a:defaultValue = "encodingDesc" ]
          attribute TEIform { text }?
        class.header |= encodingDesc
        # [D2251] 5.3.1: The project description
        projectDesc = element projectDesc { content.projectDesc }
        content.projectDesc = attributes.projectDesc, class.paragraph+
        attributes.projectDesc =
          attributes.class.global,
          attributes.class.declarable,
          [ a:defaultValue = "projectDesc" ] attribute TEIform { text }?
        class.encoding |= projectDesc
        #  end of [D2251]  5.3.1
        
        # [D2252] 5.3.2: The sampling declaration
        samplingDecl = element samplingDecl { content.samplingDecl }
        content.samplingDecl = attributes.samplingDecl, class.paragraph+
        attributes.samplingDecl =
          attributes.class.global,
          attributes.class.declarable,
          [ a:defaultValue = "samplingDecl" ]
          attribute TEIform { text }?
        class.encoding |= samplingDecl
        #  end of [D2252]  5.3.2
        
        # [D2253] 5.3.3: The editorial practices declaration
        editorialDecl = element editorialDecl { content.editorialDecl }
        content.editorialDecl =
          attributes.editorialDecl,
          (p+
           | ((correction
               | normalization
               | quotation
               | hyphenation
               | interpretation
               | segmentation
               | stdVals)+,
              p*))
        attributes.editorialDecl =
          attributes.class.global,
          attributes.class.declarable,
          [ a:defaultValue = "editorialDecl" ]
          attribute TEIform { text }?
        class.encoding |= editorialDecl
        correction = element correction { content.correction }
        content.correction = attributes.correction, class.paragraph+
        attributes.correction =
          attributes.class.global,
          attributes.class.declarable,
          [ a:defaultValue = "unknown" ]
          attribute status { "high" | "medium" | "low" | "unknown" }?,
          [ a:defaultValue = "silent" ]
          attribute method { "silent" | "tags" }?,
          [ a:defaultValue = "correction" ] attribute TEIform { text }?
        normalization = element normalization { content.normalization }
        content.normalization =
          attributes.normalization, class.paragraph+
        attributes.normalization =
          attributes.class.global,
          attributes.class.declarable,
          attribute source { datatype.Text }?,
          [ a:defaultValue = "silent" ]
          attribute method { "silent" | "tags" }?,
          [ a:defaultValue = "normalization" ]
          attribute TEIform { text }?
        quotation = element quotation { content.quotation }
        content.quotation = attributes.quotation, class.paragraph+
        attributes.quotation =
          attributes.class.global,
          attributes.class.declarable,
          [ a:defaultValue = "all" ]
          attribute marks { "none" | "some" | "all" }?,
          [ a:defaultValue = "unknown" ]
          attribute form {
            "data" | "rend" | "std" | "nonstd" | "unknown"
          }?,
          [ a:defaultValue = "quotation" ] attribute TEIform { text }?
        hyphenation = element hyphenation { content.hyphenation }
        content.hyphenation = attributes.hyphenation, class.paragraph+
        attributes.hyphenation =
          attributes.class.global,
          attributes.class.declarable,
          [ a:defaultValue = "some" ]
          attribute eol { "all" | "some" | "hard" | "none" }?,
          [ a:defaultValue = "hyphenation" ] attribute TEIform { text }?
        segmentation = element segmentation { content.segmentation }
        content.segmentation = attributes.segmentation, class.paragraph+
        attributes.segmentation =
          attributes.class.global,
          attributes.class.declarable,
          [ a:defaultValue = "segmentation" ]
          attribute TEIform { text }?
        stdVals = element stdVals { content.stdVals }
        content.stdVals = attributes.stdVals, class.paragraph+
        attributes.stdVals =
          attributes.class.global,
          attributes.class.declarable,
          [ a:defaultValue = "stdVals" ] attribute TEIform { text }?
        interpretation =
          element interpretation { content.interpretation }
        content.interpretation =
          attributes.interpretation, class.paragraph+
        attributes.interpretation =
          attributes.class.global,
          attributes.class.declarable,
          [ a:defaultValue = "interpretation" ]
          attribute TEIform { text }?
        #  end of [D2253]  5.3.3
        
        # [DHD57] 5.3.4: Tag usage and rendition declarations
        tagsDecl = element tagsDecl { content.tagsDecl }
        content.tagsDecl = attributes.tagsDecl, (rendition*, tagUsage*)
        attributes.tagsDecl =
          attributes.class.global,
          [ a:defaultValue = "tagsDecl" ] attribute TEIform { text }?
        class.encoding |= tagsDecl
        tagUsage = element tagUsage { content.tagUsage }
        content.tagUsage = attributes.tagUsage, macro.paraContent
        attributes.tagUsage =
          attributes.class.global,
          attribute gi { datatype.Text },
          attribute occurs { datatype.NonNegativeInteger }?,
          attribute ident { datatype.NonNegativeInteger }?,
          attribute render { datatype.IDref }?,
          [ a:defaultValue = "tagUsage" ] attribute TEIform { text }?
        rendition = element rendition { content.rendition }
        content.rendition = attributes.rendition, macro.paraContent
        attributes.rendition =
          attributes.class.global,
          [ a:defaultValue = "rendition" ] attribute TEIform { text }?
        #  end of [DHD57]  5.3.4
        
        # [D2254] 5.3.5.3: The reference scheme declaration
        refsDecl = element refsDecl { content.refsDecl }
        content.refsDecl = attributes.refsDecl, (p+ | step+ | state+)
        attributes.refsDecl =
          attributes.class.global,
          [ a:defaultValue = "TEI.2" ]
          attribute doctype { datatype.Text }?,
          [ a:defaultValue = "refsDecl" ] attribute TEIform { text }?
        class.encoding |= refsDecl
        step = element step { content.step }
        content.step = attributes.step, empty
        attributes.step =
          attributes.class.global,
          attribute refunit { datatype.Text }?,
          attribute length { datatype.NonNegativeInteger }?,
          attribute delim { datatype.Text }?,
          attribute from { datatype.Extptr },
          [ a:defaultValue = "DITTO" ] attribute to { datatype.Extptr },
          [ a:defaultValue = "step" ] attribute TEIform { text }?
        state = element state { content.state }
        content.state = attributes.state, empty
        attributes.state =
          attributes.class.global,
          attribute ed { datatype.Text }?,
          attribute unit { datatype.Text },
          attribute length { datatype.NonNegativeInteger }?,
          attribute delim { datatype.Text }?,
          [ a:defaultValue = "state" ] attribute TEIform { text }?
        #  end of [D2254]  5.3.5.3
        
        # [D2255] 5.3.6: The classification declaration
        class.categorize |= notAllowed
        classDecl = element classDecl { content.classDecl }
        content.classDecl = attributes.classDecl, taxonomy+
        attributes.classDecl =
          attributes.class.global,
          [ a:defaultValue = "classDecl" ] attribute TEIform { text }?
        class.encoding |= classDecl
        taxonomy = element taxonomy { content.taxonomy }
        content.taxonomy =
          attributes.taxonomy,
          (category+
           | ((bibl | biblStruct | biblFull), category*))
        attributes.taxonomy =
          attributes.class.global,
          [ a:defaultValue = "taxonomy" ] attribute TEIform { text }?
        category = element category { content.category }
        content.category = attributes.category, (catDesc, category*)
        attributes.category =
          attributes.class.global,
          [ a:defaultValue = "category" ] attribute TEIform { text }?
        catDesc = element catDesc { content.catDesc }
        content.catDesc =
          attributes.catDesc, (text | class.phrase | class.categorize)*
        attributes.catDesc =
          attributes.class.global,
          [ a:defaultValue = "catDesc" ] attribute TEIform { text }?
        #  end of [D2255]  5.3.6
        
        # [D2256] 5.3.7: The FSD declaration
        fsdDecl = element fsdDecl { content.fsdDecl }
        content.fsdDecl = attributes.fsdDecl, empty
        attributes.fsdDecl =
          attributes.class.global,
          attribute type { datatype.Text },
          attribute fsd { datatype.Entity },
          [ a:defaultValue = "fsdDecl" ] attribute TEIform { text }?
        class.encoding |= fsdDecl
        #  end of [D2256]  5.3.7
        
        # [D2258] 5.3.8: Metrical Notation Declaration
        metDecl = element metDecl { content.metDecl }
        content.metDecl =
          attributes.metDecl, (macro.componentSeq | symbol+)
        attributes.metDecl =
          attributes.class.global,
          attributes.class.declarable,
          [ a:defaultValue = "met real" ]
          attribute type { datatype.Text }?,
          attribute pattern { datatype.Text }?,
          [ a:defaultValue = "metDecl" ] attribute TEIform { text }?
        class.encoding |= metDecl
        symbol = element symbol { content.symbol }
        content.symbol = attributes.symbol, macro.phraseSeq
        attributes.symbol =
          attributes.class.global,
          attribute value { datatype.Text },
          [ a:defaultValue = "true" ]
          attribute terminal { datatype.Boolean }?,
          [ a:defaultValue = "symbol" ] attribute TEIform { text }?
        #  end of [D2258]  5.3.8
        
        # [DHDVAR] 5.3.9: Variant-Encoding Declaration
        variantEncoding =
          element variantEncoding { content.variantEncoding }
        content.variantEncoding = attributes.variantEncoding, empty
        attributes.variantEncoding =
          attributes.class.global,
          attribute method {
            "location-referenced"
            | "double-end-point"
            | "parallel-segmentation"
          },
          attribute location { "internal" | "external" },
          [ a:defaultValue = "variantEncoding" ]
          attribute TEIform { text }?
        class.encoding |= variantEncoding
        #  end of [DHDVAR]  5.3.9
        
        #  end of [D225]  5.3
        
        # [D224] 5.4: The profile description
        class.profile |= notAllowed
        profileDesc = element profileDesc { content.profileDesc }
        content.profileDesc =
          attributes.profileDesc, (creation?, class.profile*)
        attributes.profileDesc =
          attributes.class.global,
          [ a:defaultValue = "profileDesc" ] attribute TEIform { text }?
        class.header |= profileDesc
        # [D224C] 5.4.1: Creation
        creation = element creation { content.creation }
        content.creation = attributes.creation, macro.phraseSeq
        attributes.creation =
          attributes.class.global,
          [ a:defaultValue = "creation" ] attribute TEIform { text }?
        #  end of [D224C]  5.4.1
        
        # [D2241] 5.4.2: Language usage
        langUsage = element langUsage { content.langUsage }
        content.langUsage = attributes.langUsage, (p | language)+
        attributes.langUsage =
          attributes.class.global,
          attributes.class.declarable,
          [ a:defaultValue = "langUsage" ] attribute TEIform { text }?
        class.profile |= langUsage
        language = element language { content.language }
        content.language = attributes.language, macro.phraseSeq
        attributes.language =
          attributes.class.global,
          attribute wsd { datatype.Entity }?,
          attribute usage { datatype.NonNegativeInteger }?,
          [ a:defaultValue = "language" ] attribute TEIform { text }?
        #  end of [D2241]  5.4.2
        
        # [D2243] 5.4.3: Text Classification
        textClass = element textClass { content.textClass }
        content.textClass =
          attributes.textClass, (classCode | catRef | keywords)*
        attributes.textClass =
          attributes.class.global,
          attributes.class.declarable,
          [ a:defaultValue = "textClass" ] attribute TEIform { text }?
        class.profile |= textClass
        keywords = element keywords { content.keywords }
        content.keywords = attributes.keywords, (term+ | \list)
        attributes.keywords =
          attributes.class.global,
          attribute scheme { datatype.IDref },
          [ a:defaultValue = "keywords" ] attribute TEIform { text }?
        classCode = element classCode { content.classCode }
        content.classCode = attributes.classCode, macro.phraseSeq
        attributes.classCode =
          attributes.class.global,
          attribute scheme { datatype.IDref },
          [ a:defaultValue = "classCode" ] attribute TEIform { text }?
        catRef = element catRef { content.catRef }
        content.catRef = attributes.catRef, empty
        attributes.catRef =
          attributes.class.global,
          attribute target { datatype.IDrefs },
          attribute scheme { datatype.IDref },
          [ a:defaultValue = "catRef" ] attribute TEIform { text }?
        #  end of [D2243]  5.4.3
        
        #  end of [D224]  5.4
        
        # [D226] 5.5: The Revision Description
        revisionDesc = element revisionDesc { content.revisionDesc }
        content.revisionDesc =
          attributes.revisionDesc, (\list | change+)
        attributes.revisionDesc =
          attributes.class.global,
          [ a:defaultValue = "revisionDesc" ]
          attribute TEIform { text }?
        change = element change { content.change }
        content.change = attributes.change, (date, respStmt+, item)
        attributes.change =
          attributes.class.global,
          [ a:defaultValue = "change" ] attribute TEIform { text }?
        # respStmt, item, and date are declared in teicore2.
        
        #  end of [D226]  5.5
        
        #  end of [D221B]  5.1.1
        
        #  end of [D221]  5.1.1
        
      }
    }
    div {
      # include "core.rng"
      div {
        # Text Encoding Initiative Consortium:
        # Guidelines for Electronic Text Encoding and Interchange.
        # TEI P5 (unofficial)
        # Copyright (c) 2003 TEI Consortium. Permission to copy in any form
        # is granted, provided this notice is included in all copies.
        # These materials may not be altered; modifications to these schemata should
        # be performed only as specified by the Guidelines, for example in the
        # chapter entitled 'Modifying the TEI DTD'
        # These materials are subject to revision by the TEI Consortium. Current versions
        # are available from the Consortium website at http://www.tei-c.org
        # TEI P5 Relax NG Schema generated 
        # 2004-01-27T14:25:12Z
        # by relaxGen.xsl.
        
        # [DCO] 6.12: Elements available in all forms of the TEI main DTD
        
        # Definition of elements, sub-group by sub-group.
        
        # [DCOPA] 6.1: Paragraph
        p = element p { content.p }
        content.p = attributes.p, macro.paraContent
        attributes.p =
          attributes.class.global,
          [ a:defaultValue = "p" ] attribute TEIform { text }?
        class.paragraph |= p
        class.chunk |= p
        #  end of [DCOPA]  6.1
        
        # [DCOHQ] 6.3.2.1: Highlighted phrases
        foreign = element foreign { content.foreign }
        content.foreign = attributes.foreign, macro.paraContent
        attributes.foreign =
          attributes.class.global,
          [ a:defaultValue = "foreign" ] attribute TEIform { text }?
        class.hqphrase |= foreign
        # [DCOHQ1] 6.3.2.2:
        emph = element emph { content.emph }
        content.emph = attributes.emph, macro.paraContent
        attributes.emph =
          attributes.class.global,
          [ a:defaultValue = "emph" ] attribute TEIform { text }?
        class.hqphrase |= emph
        hi = element hi { content.hi }
        content.hi = attributes.hi, macro.paraContent
        attributes.hi =
          attributes.class.global,
          [ a:defaultValue = "hi" ] attribute TEIform { text }?
        class.hqphrase |= hi
        #  end of [DCOHQ1]  6.3.2.2
        
        # [DCOHQ3] 6.3.2.3:
        distinct = element distinct { content.distinct }
        content.distinct = attributes.distinct, macro.phraseSeq
        attributes.distinct =
          attributes.class.global,
          attribute type { values.distinct.type }?,
          attribute time { values.distinct.time }?,
          attribute space { values.distinct.space }?,
          attribute social { values.distinct.social }?,
          [ a:defaultValue = "distinct" ] attribute TEIform { text }?
        values.distinct.type = text
        values.distinct.time = text
        values.distinct.space = text
        values.distinct.social = text
        class.hqphrase |= distinct
        #  end of [DCOHQ3]  6.3.2.3
        
        # [DCOHQQ] 6.3.3: Quotation
        q = element q { content.q }
        content.q = attributes.q, macro.specialPara
        attributes.q =
          attributes.class.global,
          attribute type { values.q.type }?,
          [ a:defaultValue = "unknown" ]
          attribute direct { datatype.UBoolean }?,
          attribute who { datatype.Key }?,
          [ a:defaultValue = "q" ] attribute TEIform { text }?
        values.q.type = text
        class.hqinter |= q
        quote = element quote { content.quote }
        content.quote = attributes.quote, macro.specialPara
        attributes.quote =
          attributes.class.global,
          [ a:defaultValue = "quote" ] attribute TEIform { text }?
        class.hqinter |= quote
        cit = element cit { content.cit }
        content.cit =
          attributes.cit,
          (q | quote | class.bibl | class.loc | class.Incl)+
        attributes.cit =
          attributes.class.global,
          [ a:defaultValue = "cit" ] attribute TEIform { text }?
        class.hqinter |= cit
        soCalled = element soCalled { content.soCalled }
        content.soCalled = attributes.soCalled, macro.phraseSeq
        attributes.soCalled =
          attributes.class.global,
          [ a:defaultValue = "soCalled" ] attribute TEIform { text }?
        class.hqphrase |= soCalled
        #  end of [DCOHQQ]  6.3.3
        
        # [DCOHQU] 6.3.4: Terms, glosses, etc.
        term = element term { content.term }
        content.term = attributes.term, macro.phraseSeq
        attributes.term =
          attributes.class.global,
          attribute type { datatype.Key }?,
          [ a:defaultValue = "term" ] attribute TEIform { text }?
        class.hqphrase |= term
        mentioned = element mentioned { content.mentioned }
        content.mentioned = attributes.mentioned, macro.phraseSeq
        attributes.mentioned =
          attributes.class.global,
          [ a:defaultValue = "mentioned" ] attribute TEIform { text }?
        class.hqphrase |= mentioned
        gloss = element gloss { content.gloss }
        content.gloss = attributes.gloss, macro.phraseSeq
        attributes.gloss =
          attributes.class.global,
          attribute target { datatype.IDref }?,
          [ a:defaultValue = "gloss" ] attribute TEIform { text }?
        class.hqphrase |= gloss
        #  end of [DCOHQU]  6.3.4
        
        #  end of [DCOHQ]  6.3.2.1
        
        # [DCONA] 6.4.1: Proper Nouns
        name = element name { content.name }
        content.name = attributes.name, macro.phraseSeq
        attributes.name =
          attributes.class.global,
          attributes.class.names,
          attribute type { datatype.Text }?,
          [ a:defaultValue = "name" ] attribute TEIform { text }?
        class.data |= name
        class.agent |= name
        class.addrPart |= name
        rs = element rs { content.rs }
        content.rs = attributes.rs, macro.phraseSeq
        attributes.rs =
          attributes.class.global,
          attributes.class.names,
          attribute type { datatype.Text }?,
          [ a:defaultValue = "rs" ] attribute TEIform { text }?
        class.data |= rs
        #  end of [DCONA]  6.4.1
        
        # [DCONU] 6.4.3: Numbers and measures
        num = element num { content.num }
        content.num = attributes.num, macro.phraseSeq
        attributes.num =
          attributes.class.global,
          attribute type { datatype.Text }?,
          attribute value { datatype.NonNegativeInteger }?,
          [ a:defaultValue = "num" ] attribute TEIform { text }?
        class.data |= num
        measure = element measure { content.measure }
        content.measure = attributes.measure, macro.phraseSeq
        attributes.measure =
          attributes.class.global,
          attributes.class.names,
          attribute type { datatype.Text }?,
          [ a:defaultValue = "measure" ] attribute TEIform { text }?
        class.data |= measure
        #  end of [DCONU]  6.4.3
        
        # [DCODA] 6.4.4: Dates and times
        date = element date { content.date }
        content.date = attributes.date, macro.phraseSeq
        attributes.date =
          attributes.class.global,
          attribute calendar { datatype.Text }?,
          attribute value { datatype.Date }?,
          attribute certainty { datatype.Text }?,
          [ a:defaultValue = "date" ] attribute TEIform { text }?
        class.data |= date
        class.date |= date
        dateRange = element dateRange { content.dateRange }
        content.dateRange = attributes.dateRange, macro.phraseSeq
        attributes.dateRange =
          attributes.class.global,
          attribute calendar { datatype.Text }?,
          attribute from { datatype.Date }?,
          attribute to { datatype.Date }?,
          attribute exact { "to" | "from" | "both" | "none" }?,
          [ a:defaultValue = "dateRange" ] attribute TEIform { text }?
        class.data |= dateRange
        class.date |= dateRange
        time = element time { content.time }
        content.time = attributes.time, macro.phraseSeq
        attributes.time =
          attributes.class.global,
          attribute value { datatype.Time }?,
          attribute type { "am" | "pm" | "24hour" | "descriptive" }?,
          attribute zone { datatype.Text }?,
          [ a:defaultValue = "time" ] attribute TEIform { text }?
        class.data |= time
        timeRange = element timeRange { content.timeRange }
        content.timeRange = attributes.timeRange, macro.phraseSeq
        attributes.timeRange =
          attributes.class.global,
          attribute from { datatype.Time }?,
          attribute to { datatype.Time }?,
          attribute exact { "to" | "from" | "both" | "none" }?,
          [ a:defaultValue = "timeRange" ] attribute TEIform { text }?
        class.data |= timeRange
        #  end of [DCODA]  6.4.4
        
        # [DCOAB] 6.4.5: Abbreviations
        abbr = element abbr { content.abbr }
        content.abbr = attributes.abbr, macro.phraseSeq
        attributes.abbr =
          attributes.class.global,
          attribute expan { datatype.Text }?,
          attribute resp { datatype.IDref }?,
          attribute cert { datatype.Text }?,
          attribute type { datatype.Text }?,
          [ a:defaultValue = "abbr" ] attribute TEIform { text }?
        class.data |= abbr
        expan = element expan { content.expan }
        content.expan = attributes.expan, macro.phraseSeq
        attributes.expan =
          attributes.class.global,
          attribute abbr { datatype.Text }?,
          attribute resp { datatype.IDref }?,
          attribute cert { datatype.Text }?,
          attribute type { values.expan.type }?,
          [ a:defaultValue = "expan" ] attribute TEIform { text }?
        values.expan.type = text
        class.data |= expan
        #  end of [DCOAB]  6.4.5
        
        # [DCOEDC] 6.5.1: Editorial tags for correction
        sic = element sic { content.sic }
        content.sic = attributes.sic, macro.specialPara
        attributes.sic =
          attributes.class.global,
          attribute corr { datatype.Text }?,
          attribute resp { datatype.Key }?,
          attribute cert { datatype.Text }?,
          [ a:defaultValue = "sic" ] attribute TEIform { text }?
        class.edit |= sic
        corr = element corr { content.corr }
        content.corr = attributes.corr, macro.specialPara
        attributes.corr =
          attributes.class.global,
          attribute sic { datatype.Text }?,
          attribute resp { datatype.Text }?,
          attribute cert { datatype.Text }?,
          [ a:defaultValue = "corr" ] attribute TEIform { text }?
        class.edit |= corr
        #  end of [DCOEDC]  6.5.1
        
        # [DCOEDR] 6.5.2: Editorial tags for regularization
        reg = element reg { content.reg }
        content.reg = attributes.reg, macro.phraseSeq
        attributes.reg =
          attributes.class.global,
          attribute orig { datatype.Text }?,
          attribute resp { values.reg.resp }?,
          [ a:defaultValue = "reg" ] attribute TEIform { text }?
        values.reg.resp = text
        class.edit |= reg
        orig = element orig { content.orig }
        content.orig = attributes.orig, macro.phraseSeq
        attributes.orig =
          attributes.class.global,
          attribute reg { datatype.Text }?,
          attribute resp { datatype.Text }?,
          [ a:defaultValue = "orig" ] attribute TEIform { text }?
        class.edit |= orig
        #  end of [DCOEDR]  6.5.2
        
        # [DCOEDA] 6.5.3: Other editorial tags
        gap = element gap { content.gap }
        content.gap = attributes.gap, empty
        attributes.gap =
          attributes.class.global,
          attribute desc { datatype.Text }?,
          attribute reason { datatype.Text }?,
          attribute resp { datatype.IDref }?,
          attribute hand { datatype.IDref }?,
          attribute agent { datatype.Text }?,
          attribute extent { datatype.Text }?,
          [ a:defaultValue = "gap" ] attribute TEIform { text }?
        class.editIncl |= gap
        add = element add { content.add }
        content.add = attributes.add, macro.specialPara
        attributes.add =
          attributes.class.global,
          attribute place { datatype.Text }?,
          attribute resp { datatype.IDref }?,
          attribute cert { datatype.Text }?,
          attribute hand { datatype.IDref }?,
          [ a:defaultValue = "add" ] attribute TEIform { text }?
        class.edit |= add
        del = element del { content.del }
        content.del = attributes.del, macro.phraseSeq
        attributes.del =
          attributes.class.global,
          attribute type { datatype.Text }?,
          [ a:defaultValue = "unremarkable" ]
          attribute status { datatype.Text }?,
          attribute resp { datatype.IDref }?,
          attribute cert { datatype.Text }?,
          attribute hand { datatype.IDref }?,
          [ a:defaultValue = "del" ] attribute TEIform { text }?
        class.edit |= del
        unclear = element unclear { content.unclear }
        content.unclear = attributes.unclear, macro.paraContent
        attributes.unclear =
          attributes.class.global,
          attribute reason { datatype.Text }?,
          attribute resp { datatype.Key }?,
          attribute cert { datatype.Text }?,
          attribute hand { datatype.IDref }?,
          attribute agent { datatype.Text }?,
          [ a:defaultValue = "unclear" ] attribute TEIform { text }?
        class.edit |= unclear
        #  end of [DCOEDA]  6.5.3
        
        # [DCOAD] 6.4.2: Addresses and their components
        address = element address { content.address }
        content.address =
          attributes.address,
          (class.Incl*,
           ((addrLine, class.Incl*)+ | (class.addrPart, class.Incl*)*))
        attributes.address =
          attributes.class.global,
          [ a:defaultValue = "address" ] attribute TEIform { text }?
        class.data |= address
        addrLine = element addrLine { content.addrLine }
        content.addrLine = attributes.addrLine, macro.phraseSeq
        attributes.addrLine =
          attributes.class.global,
          [ a:defaultValue = "addrLine" ] attribute TEIform { text }?
        street = element street { content.street }
        content.street = attributes.street, macro.phraseSeq
        attributes.street =
          attributes.class.global,
          [ a:defaultValue = "street" ] attribute TEIform { text }?
        class.addrPart |= street
        postCode = element postCode { content.postCode }
        content.postCode = attributes.postCode, text
        attributes.postCode =
          attributes.class.global,
          [ a:defaultValue = "postCode" ] attribute TEIform { text }?
        class.addrPart |= postCode
        postBox = element postBox { content.postBox }
        content.postBox = attributes.postBox, text
        attributes.postBox =
          attributes.class.global,
          [ a:defaultValue = "postBox" ] attribute TEIform { text }?
        class.addrPart |= postBox
        # Other components of addresses should be represented
        # using the general purpose NAME element
        
        #  end of [DCOAD]  6.4.2
        
        # [DCOXR] 6.6: Simple cross references
        ptr = element ptr { content.ptr }
        content.ptr = attributes.ptr, empty
        attributes.ptr =
          attributes.class.global,
          attributes.class.pointer,
          attribute target { datatype.IDrefs },
          [ a:defaultValue = "ptr" ] attribute TEIform { text }?
        class.loc |= ptr
        ref = element ref { content.ref }
        content.ref = attributes.ref, macro.paraContent
        attributes.ref =
          attributes.class.global,
          attributes.class.pointer,
          attribute target { datatype.IDrefs }?,
          [ a:defaultValue = "ref" ] attribute TEIform { text }?
        class.loc |= ref
        #  end of [DCOXR]  6.6
        
        # [DCOLI] 6.7: Lists and List Items
        \list = element list { content.list }
        content.list =
          attributes.list,
          (class.Incl*,
           (head, class.Incl*)?,
           ((item, class.Incl*)*
            | ((headLabel, class.Incl*)?,
               (headItem, class.Incl*)?,
               (label, class.Incl*, item, class.Incl*)+)))
        attributes.list =
          attributes.class.global,
          [ a:defaultValue = "simple" ]
          attribute type { datatype.Text }?,
          [ a:defaultValue = "list" ] attribute TEIform { text }?
        class.lists |= \list
        item = element item { content.item }
        content.item = attributes.item, macro.specialPara
        attributes.item =
          attributes.class.global,
          [ a:defaultValue = "item" ] attribute TEIform { text }?
        label = element label { content.label }
        content.label = attributes.label, macro.phraseSeq
        attributes.label =
          attributes.class.global,
          [ a:defaultValue = "label" ] attribute TEIform { text }?
        class.lists |= label
        head = element head { content.head }
        content.head = attributes.head, macro.paraContent
        attributes.head =
          attributes.class.global,
          attribute type { values.head.type }?,
          [ a:defaultValue = "head" ] attribute TEIform { text }?
        values.head.type = text
        class.divtop |= head
        class.fmchunk |= head
        headLabel = element headLabel { content.headLabel }
        content.headLabel = attributes.headLabel, macro.phraseSeq
        attributes.headLabel =
          attributes.class.global,
          [ a:defaultValue = "headLabel" ] attribute TEIform { text }?
        headItem = element headItem { content.headItem }
        content.headItem = attributes.headItem, macro.phraseSeq
        attributes.headItem =
          attributes.class.global,
          [ a:defaultValue = "headItem" ] attribute TEIform { text }?
        #  end of [DCOLI]  6.7
        
        # [DCONO] 6.8.1: Annotation
        note = element note { content.note }
        content.note = attributes.note, macro.specialPara
        attributes.note =
          attributes.class.global,
          attribute type { values.note.type }?,
          attribute resp { datatype.Text }?,
          [ a:defaultValue = "unspecified" ]
          attribute place { datatype.Text }?,
          [ a:defaultValue = "true" ]
          attribute anchored { datatype.Boolean }?,
          attribute target { datatype.IDrefs }?,
          attribute targetEnd { datatype.IDrefs }?,
          [ a:defaultValue = "note" ] attribute TEIform { text }?
        values.note.type = text
        class.notes |= note
        class.biblPart |= note
        class.dictionaryTopLevel |= note
        # [DCONOIX] 6.8.2: Index Entries
        index = element index { content.index }
        content.index = attributes.index, empty
        attributes.index =
          attributes.class.global,
          attribute index { datatype.Text }?,
          attribute level1 { datatype.Text },
          attribute level2 { datatype.Text }?,
          attribute level3 { datatype.Text }?,
          attribute level4 { datatype.Text }?,
          [ a:defaultValue = "index" ] attribute TEIform { text }?
        class.metadata |= index
        divGen = element divGen { content.divGen }
        content.divGen = attributes.divGen, empty
        attributes.divGen =
          attributes.class.global,
          attribute type { datatype.Text }?,
          [ a:defaultValue = "divGen" ] attribute TEIform { text }?
        class.front |= divGen
        #  end of [DCONOIX]  6.8.2
        
        #  end of [DCONO]  6.8.1
        
        # [DCORSM] 6.9.3: Milestone tags
        milestone = element milestone { content.milestone }
        content.milestone = attributes.milestone, empty
        attributes.milestone =
          attributes.class.global,
          attribute ed { datatype.Text }?,
          attribute unit { datatype.Text },
          [ a:defaultValue = "milestone" ] attribute TEIform { text }?
        class.refsys |= milestone
        pb = element pb { content.pb }
        content.pb = attributes.pb, empty
        attributes.pb =
          attributes.class.global,
          attribute ed { datatype.Text }?,
          [ a:defaultValue = "pb" ] attribute TEIform { text }?
        class.refsys |= pb
        lb = element lb { content.lb }
        content.lb = attributes.lb, empty
        attributes.lb =
          attributes.class.global,
          attribute ed { datatype.Text }?,
          [ a:defaultValue = "lb" ] attribute TEIform { text }?
        class.refsys |= lb
        cb = element cb { content.cb }
        content.cb = attributes.cb, empty
        attributes.cb =
          attributes.class.global,
          attribute ed { datatype.Text }?,
          [ a:defaultValue = "cb" ] attribute TEIform { text }?
        class.refsys |= cb
        #  end of [DCORSM]  6.9.3
        
        # [DCOBI] 6.10.1: Tags for Bibliographic References
        bibl = element bibl { content.bibl }
        content.bibl =
          attributes.bibl,
          (text | class.phrase | class.biblPart | class.Incl)*
        attributes.bibl =
          attributes.class.global,
          attributes.class.declarable,
          [ a:defaultValue = "bibl" ] attribute TEIform { text }?
        class.bibl |= bibl
        biblStruct = element biblStruct { content.biblStruct }
        content.biblStruct =
          attributes.biblStruct,
          (class.Incl*,
           (analytic, class.Incl*)?,
           ((monogr, class.Incl*), (series, class.Incl*)*)+,
           ((note, class.Incl*) | (idno, class.Incl*))*)
        attributes.biblStruct =
          attributes.class.global,
          attributes.class.declarable,
          [ a:defaultValue = "biblStruct" ] attribute TEIform { text }?
        class.bibl |= biblStruct
        biblFull = element biblFull { content.biblFull }
        content.biblFull =
          attributes.biblFull,
          (class.Incl*,
           (titleStmt, class.Incl*),
           (editionStmt, class.Incl*)?,
           (extent, class.Incl*)?,
           (publicationStmt, class.Incl*),
           (seriesStmt, class.Incl*)?,
           (notesStmt, class.Incl*)?,
           (sourceDesc, class.Incl*)*)
        attributes.biblFull =
          attributes.class.global,
          attributes.class.declarable,
          [ a:defaultValue = "biblFull" ] attribute TEIform { text }?
        class.bibl |= biblFull
        listBibl = element listBibl { content.listBibl }
        content.listBibl =
          attributes.listBibl,
          (class.Incl*,
           (head, class.Incl*)?,
           (bibl | biblStruct | biblFull),
           (bibl | biblStruct | biblFull | class.Incl)*,
           (class.divbot, class.Incl*)?)
        attributes.listBibl =
          attributes.class.global,
          attributes.class.declarable,
          [ a:defaultValue = "listBibl" ] attribute TEIform { text }?
        class.lists |= listBibl
        # [DCOBILV] 6.10.2.1: Levels of bibliographic information
        analytic = element analytic { content.analytic }
        content.analytic =
          attributes.analytic,
          (author | editor | respStmt | title | class.Incl)*
        attributes.analytic =
          attributes.class.global,
          [ a:defaultValue = "analytic" ] attribute TEIform { text }?
        class.biblPart |= analytic
        monogr = element monogr { content.monogr }
        content.monogr =
          attributes.monogr,
          ((class.Incl*,
            (((author | editor | respStmt),
              (author | editor | respStmt | class.Incl)*,
              (title, class.Incl*)+,
              ((editor | respStmt), class.Incl*)*)
             | ((title, class.Incl*)+,
                ((author | editor | respStmt), class.Incl*)*)))?,
           ((note | meeting), class.Incl*)*,
           (edition, (editor | respStmt | class.Incl)*)*,
           imprint,
           (imprint | extent | biblScope | class.Incl)*)
        attributes.monogr =
          attributes.class.global,
          [ a:defaultValue = "monogr" ] attribute TEIform { text }?
        class.biblPart |= monogr
        series = element series { content.series }
        content.series =
          attributes.series,
          (text | title | editor | respStmt | biblScope | class.Incl)*
        attributes.series =
          attributes.class.global,
          [ a:defaultValue = "series" ] attribute TEIform { text }?
        class.biblPart |= series
        #  end of [DCOBILV]  6.10.2.1
        
        # [DCOBICOR] 6.10.2.2: Author, title, etc.
        author = element author { content.author }
        content.author = attributes.author, macro.phraseSeq
        attributes.author =
          attributes.class.global,
          [ a:defaultValue = "author" ] attribute TEIform { text }?
        class.biblPart |= author
        editor = element editor { content.editor }
        content.editor = attributes.editor, macro.phraseSeq
        attributes.editor =
          attributes.class.global,
          [ a:defaultValue = "editor" ]
          attribute role { values.editor.role }?,
          [ a:defaultValue = "editor" ] attribute TEIform { text }?
        values.editor.role = text
        class.biblPart |= editor
        respStmt = element respStmt { content.respStmt }
        content.respStmt =
          attributes.respStmt, (resp | name | class.Incl)+
        attributes.respStmt =
          attributes.class.global,
          [ a:defaultValue = "respStmt" ] attribute TEIform { text }?
        class.biblPart |= respStmt
        resp = element resp { content.resp }
        content.resp = attributes.resp, macro.phraseSeq
        attributes.resp =
          attributes.class.global,
          [ a:defaultValue = "resp" ] attribute TEIform { text }?
        title = element title { content.title }
        content.title = attributes.title, macro.paraContent
        attributes.title =
          attributes.class.global,
          attribute level { "a" | "m" | "j" | "s" | "u" }?,
          attribute type { datatype.Text }?,
          [ a:defaultValue = "title" ] attribute TEIform { text }?
        class.hqphrase |= title
        meeting = element meeting { content.meeting }
        content.meeting = attributes.meeting, macro.paraContent
        attributes.meeting =
          attributes.class.global,
          [ a:defaultValue = "meeting" ] attribute TEIform { text }?
        #  end of [DCOBICOR]  6.10.2.2
        
        # [DCOPUB] 6.10.2.3: Bibliographic subelements
        imprint = element imprint { content.imprint }
        content.imprint =
          attributes.imprint,
          (pubPlace | publisher | date | biblScope | class.Incl)*
        attributes.imprint =
          attributes.class.global,
          [ a:defaultValue = "imprint" ] attribute TEIform { text }?
        class.biblPart |= imprint
        publisher = element publisher { content.publisher }
        content.publisher = attributes.publisher, macro.phraseSeq
        attributes.publisher =
          attributes.class.global,
          [ a:defaultValue = "publisher" ] attribute TEIform { text }?
        class.biblPart |= publisher
        biblScope = element biblScope { content.biblScope }
        content.biblScope = attributes.biblScope, macro.phraseSeq
        attributes.biblScope =
          attributes.class.global,
          attribute type { datatype.Text }?,
          [ a:defaultValue = "biblScope" ] attribute TEIform { text }?
        class.biblPart |= biblScope
        pubPlace = element pubPlace { content.pubPlace }
        content.pubPlace = attributes.pubPlace, macro.phraseSeq
        attributes.pubPlace =
          attributes.class.global,
          attributes.class.names,
          [ a:defaultValue = "pubPlace" ] attribute TEIform { text }?
        class.biblPart |= pubPlace
        # Note and date are defined elsewhere, as are extent, address,
        # and idno.
        
        #  end of [DCOPUB]  6.10.2.3
        
        #  end of [DCOBI]  6.10.1
        
        # [DCOVE] 6.11.1: Verse
        l = element l { content.l }
        content.l = attributes.l, macro.paraContent
        attributes.l =
          attributes.class.global,
          attributes.class.metrical,
          attributes.class.enjamb,
          [ a:defaultValue = "N" ]
          attribute part { "Y" | "N" | "I" | "M" | "F" }?,
          [ a:defaultValue = "l" ] attribute TEIform { text }?
        class.chunk |= l
        lg = element lg { content.lg }
        content.lg =
          attributes.lg,
          ((class.divtop | class.Incl)*,
           (l | lg),
           (l | lg | class.Incl)*,
           (class.divbot, class.Incl*)*)
        attributes.lg =
          attributes.class.global,
          attributes.class.divn,
          [ a:defaultValue = "lg" ] attribute TEIform { text }?
        class.chunk |= lg
        #  end of [DCOVE]  6.11.1
        
        # [DCODR] 6.11.2: Drama
        sp = element sp { content.sp }
        content.sp =
          attributes.sp,
          (class.Incl*,
           (speaker, class.Incl*)?,
           ((p | l | lg | class.segment | stage), class.Incl*)+)
        attributes.sp =
          attributes.class.global,
          attribute who { datatype.IDrefs }?,
          [ a:defaultValue = "sp" ] attribute TEIform { text }?
        class.chunk |= sp
        speaker = element speaker { content.speaker }
        content.speaker = attributes.speaker, macro.phraseSeq
        attributes.speaker =
          attributes.class.global,
          [ a:defaultValue = "speaker" ] attribute TEIform { text }?
        stage = element stage { content.stage }
        content.stage = attributes.stage, macro.specialPara
        attributes.stage =
          attributes.class.global,
          attribute type { datatype.Text }?,
          [ a:defaultValue = "stage" ] attribute TEIform { text }?
        class.inter |= stage
        class.common |= stage
        #  end of [DCODR]  6.11.2
        
        #  end of [DCO]  6.12
        
      }
    }
    #  end of [DSTOVCO]  3.6.3
    
    # [DSTOVBA] 3.6.4: Embed base tag set
    
    # A different base will be embedded, depending on which
    # parameter entity has been declared by the user
    # with the value 'INCLUDE'.
    
    #  end of [DSTOVBA]  3.6.4
    
    # [DSTOVAD] 3.6.5: Embed additional tag sets
    
    # These entities are declared and embedded only when the user
    # has overridden the default declaration of IGNORE for a specific
    # additional tag set.
    
    #  end of [DSTOVAD]  3.6.5
    
    #  end of [DSTTEI2]  3.6.1
    
  }
}
div {
  # include "/TEI/web/P5/Schema/general.rng"
  div {
    # Text Encoding Initiative Consortium:
    # Guidelines for Electronic Text Encoding and Interchange.
    # TEI P5 (unofficial)
    # Copyright (c) 2003 TEI Consortium. Permission to copy in any form
    # is granted, provided this notice is included in all copies.
    # These materials may not be altered; modifications to these schemata should
    # be performed only as specified by the Guidelines, for example in the
    # chapter entitled 'Modifying the TEI DTD'
    # These materials are subject to revision by the TEI Consortium. Current versions
    # are available from the Consortium website at http://www.tei-c.org
    # TEI P5 Relax NG Schema generated 
    # 2004-01-27T14:25:17Z
    # by relaxGen.xsl.
    
    # [DSTCBGN] 3.4: General-Base Tag Set
    div {
      # include "structure.rng"
      div {
        # Text Encoding Initiative Consortium:
        # Guidelines for Electronic Text Encoding and Interchange.
        # TEI P5 (unofficial)
        # Copyright (c) 2003 TEI Consortium. Permission to copy in any form
        # is granted, provided this notice is included in all copies.
        # These materials may not be altered; modifications to these schemata should
        # be performed only as specified by the Guidelines, for example in the
        # chapter entitled 'Modifying the TEI DTD'
        # These materials are subject to revision by the TEI Consortium. Current versions
        # are available from the Consortium website at http://www.tei-c.org
        # TEI P5 Relax NG Schema generated 
        # 2004-01-27T14:25:19Z
        # by relaxGen.xsl.
        
        # [DDS] 22.7: Default text structure
        
        # This definition of the basic text structure is used by most
        # TEI base tag sets; some bases, however, use slight variations
        # upon it.
        
        # [DDSTEXT] 22.: Top-level parts of default structure
        \text = element text { content.text }
        content.text =
          attributes.text,
          (class.Incl*,
           (front, class.Incl*)?,
           (body | group),
           class.Incl*,
           (back, class.Incl*)?)
        attributes.text =
          attributes.class.global,
          attributes.class.declaring,
          [ a:defaultValue = "text" ] attribute TEIform { text }?
        class.inter |= \text
        class.teiText |= \text
        body = element body { content.body }
        content.body =
          attributes.body,
          ((class.divtop | class.Incl)*,
           (((macro.component, class.Incl*)+,
             ((divGen, class.Incl*)*,
              ((\div, (\div | divGen | class.Incl)*)
               | (div0, (div0 | divGen | class.Incl)*)
               | (div1, (div1 | divGen | class.Incl)*))?))
            | ((divGen, class.Incl*)*,
               ((\div, (\div | divGen | class.Incl)*)
                | (div0, (div0 | divGen | class.Incl)*)
                | (div1, (div1 | divGen | class.Incl)*)))),
           (class.divbot, class.Incl*)*)
        attributes.body =
          attributes.class.global,
          attributes.class.declaring,
          [ a:defaultValue = "body" ] attribute TEIform { text }?
        group = element group { content.group }
        content.group =
          attributes.group,
          ((class.divtop | class.Incl)*,
           ((\text | group), (\text | group | class.Incl)*),
           (class.divbot, class.Incl*)*)
        attributes.group =
          attributes.class.global,
          attributes.class.declaring,
          [ a:defaultValue = "group" ] attribute TEIform { text }?
        #  end of [DDSTEXT]  22.
        
        # [DDSDIV] 22.1.1: Un-numbered divisions
        \div = element div { content.div }
        content.div =
          attributes.div,
          ((class.divtop | class.Incl)*,
           (((\div | divGen), class.Incl*)+
            | ((macro.component, class.Incl*)+,
               ((\div | divGen), class.Incl*)*)),
           (class.divbot, class.Incl*)*)
        attributes.div =
          attributes.class.global,
          attributes.class.divn,
          attributes.class.declaring,
          [ a:defaultValue = "div" ] attribute TEIform { text }?
        #  end of [DDSDIV]  22.1.1
        
        # [DDSDIVN] 22.1.2: Numbered divisions
        div0 = element div0 { content.div0 }
        content.div0 =
          attributes.div0,
          ((class.divtop | class.Incl)*,
           (((div1 | divGen), class.Incl*)+
            | ((macro.component, class.Incl*)+,
               ((div1 | divGen), class.Incl*)*)),
           (class.divbot, class.Incl*)*)
        attributes.div0 =
          attributes.class.global,
          attributes.class.divn,
          attributes.class.declaring,
          [ a:defaultValue = "div0" ] attribute TEIform { text }?
        div1 = element div1 { content.div1 }
        content.div1 =
          attributes.div1,
          ((class.divtop | class.Incl)*,
           (((div2 | divGen), class.Incl*)+
            | ((macro.component, class.Incl*)+,
               ((div2 | divGen), class.Incl*)*)),
           (class.divbot, class.Incl*)*)
        attributes.div1 =
          attributes.class.global,
          attributes.class.divn,
          attributes.class.declaring,
          [ a:defaultValue = "div1" ] attribute TEIform { text }?
        div2 = element div2 { content.div2 }
        content.div2 =
          attributes.div2,
          ((class.divtop | class.Incl)*,
           (((div3 | divGen), class.Incl*)+
            | ((macro.component, class.Incl*)+,
               ((div3 | divGen), class.Incl*)*)),
           (class.divbot, class.Incl*)*)
        attributes.div2 =
          attributes.class.global,
          attributes.class.divn,
          attributes.class.declaring,
          [ a:defaultValue = "div2" ] attribute TEIform { text }?
        div3 = element div3 { content.div3 }
        content.div3 =
          attributes.div3,
          ((class.divtop | class.Incl)*,
           (((div4 | divGen), class.Incl*)+
            | ((macro.component, class.Incl*)+,
               ((div4 | divGen), class.Incl*)*)),
           (class.divbot, class.Incl*)*)
        attributes.div3 =
          attributes.class.global,
          attributes.class.divn,
          attributes.class.declaring,
          [ a:defaultValue = "div3" ] attribute TEIform { text }?
        div4 = element div4 { content.div4 }
        content.div4 =
          attributes.div4,
          ((class.divtop | class.Incl)*,
           (((div5 | divGen), class.Incl*)+
            | ((macro.component, class.Incl*)+,
               ((div5 | divGen), class.Incl*)*)),
           (class.divbot, class.Incl*)*)
        attributes.div4 =
          attributes.class.global,
          attributes.class.divn,
          attributes.class.declaring,
          [ a:defaultValue = "div4" ] attribute TEIform { text }?
        div5 = element div5 { content.div5 }
        content.div5 =
          attributes.div5,
          ((class.divtop | class.Incl)*,
           (((div6 | divGen), class.Incl*)+
            | ((macro.component, class.Incl*)+,
               ((div6 | divGen), class.Incl*)*)),
           (class.divbot, class.Incl*)*)
        attributes.div5 =
          attributes.class.global,
          attributes.class.divn,
          attributes.class.declaring,
          [ a:defaultValue = "div5" ] attribute TEIform { text }?
        div6 = element div6 { content.div6 }
        content.div6 =
          attributes.div6,
          ((class.divtop | class.Incl)*,
           (((div7 | divGen), class.Incl*)+
            | ((macro.component, class.Incl*)+,
               ((div7 | divGen), class.Incl*)*)),
           (class.divbot, class.Incl*)*)
        attributes.div6 =
          attributes.class.global,
          attributes.class.divn,
          attributes.class.declaring,
          [ a:defaultValue = "div6" ] attribute TEIform { text }?
        div7 = element div7 { content.div7 }
        content.div7 =
          attributes.div7,
          ((class.divtop | class.Incl)*,
           (macro.component, class.Incl*)+,
           (class.divbot, class.Incl*)*)
        attributes.div7 =
          attributes.class.global,
          attributes.class.divn,
          attributes.class.declaring,
          [ a:defaultValue = "div7" ] attribute TEIform { text }?
        #  end of [DDSDIVN]  22.1.2
        
        # [DDSDIVX] 22.2.4: Tags for start and end of divisions
        trailer = element trailer { content.trailer }
        content.trailer = attributes.trailer, macro.phraseSeq
        attributes.trailer =
          attributes.class.global,
          [ a:defaultValue = "trailer" ] attribute TEIform { text }?
        class.divbot |= trailer
        byline = element byline { content.byline }
        content.byline =
          attributes.byline,
          (text | class.phrase | docAuthor | class.Incl)*
        attributes.byline =
          attributes.class.global,
          [ a:defaultValue = "byline" ] attribute TEIform { text }?
        class.divtop |= byline
        class.divbot |= byline
        class.tpParts |= byline
        class.fmchunk |= byline
        dateline = element dateline { content.dateline }
        content.dateline =
          attributes.dateline,
          (text | date | time | name | address | class.Incl)*
        attributes.dateline =
          attributes.class.global,
          [ a:defaultValue = "dateline" ] attribute TEIform { text }?
        class.divtop |= dateline
        class.divbot |= dateline
        argument = element argument { content.argument }
        content.argument =
          attributes.argument,
          (class.Incl*, (head?, macro.componentSeq))
        attributes.argument =
          attributes.class.global,
          [ a:defaultValue = "argument" ] attribute TEIform { text }?
        class.divtop |= argument
        class.fmchunk |= argument
        epigraph = element epigraph { content.epigraph }
        content.epigraph = attributes.epigraph, macro.componentSeq
        attributes.epigraph =
          attributes.class.global,
          [ a:defaultValue = "epigraph" ] attribute TEIform { text }?
        class.divtop |= epigraph
        class.tpParts |= epigraph
        class.divbot |= epigraph
        class.fmchunk |= epigraph
        opener = element opener { content.opener }
        content.opener =
          attributes.opener,
          (text
           | class.phrase
           | argument
           | byline
           | dateline
           | epigraph
           | salute
           | signed
           | class.Incl)*
        attributes.opener =
          attributes.class.global,
          [ a:defaultValue = "opener" ] attribute TEIform { text }?
        class.divtop |= opener
        closer = element closer { content.closer }
        content.closer =
          attributes.closer,
          (text
           | signed
           | dateline
           | salute
           | class.phrase
           | class.Incl)*
        attributes.closer =
          attributes.class.global,
          [ a:defaultValue = "closer" ] attribute TEIform { text }?
        class.divbot |= closer
        salute = element salute { content.salute }
        content.salute = attributes.salute, macro.phraseSeq
        attributes.salute =
          attributes.class.global,
          [ a:defaultValue = "salute" ] attribute TEIform { text }?
        class.divtop |= salute
        class.divbot |= salute
        signed = element signed { content.signed }
        content.signed = attributes.signed, macro.phraseSeq
        attributes.signed =
          attributes.class.global,
          [ a:defaultValue = "signed" ] attribute TEIform { text }?
        class.divtop |= signed
        class.divbot |= signed
        # The HEAD element is declared in the core tag set.
        
        #  end of [DDSDIVX]  22.2.4
        
        # Front matter is defined in TEI.front file.
        div {
          # include "frontmatter.rng"
          div {
            # Text Encoding Initiative Consortium:
            # Guidelines for Electronic Text Encoding and Interchange.
            # TEI P5 (unofficial)
            # Copyright (c) 2003 TEI Consortium. Permission to copy in any form
            # is granted, provided this notice is included in all copies.
            # These materials may not be altered; modifications to these schemata should
            # be performed only as specified by the Guidelines, for example in the
            # chapter entitled 'Modifying the TEI DTD'
            # These materials are subject to revision by the TEI Consortium. Current versions
            # are available from the Consortium website at http://www.tei-c.org
            # TEI P5 Relax NG Schema generated 
            # 2004-01-27T14:25:16Z
            # by relaxGen.xsl.
            
            # [DDSFRONT] 22.5: Additional Tag Set for Front Matter
            front = element front { content.front }
            content.front =
              attributes.front,
              ((class.front | class.Incl)*,
               ((class.fmchunk,
                 (class.fmchunk | titlePage | class.Incl)*)
                | (\div, (\div | class.front | class.Incl)*)
                | (div1, (div1 | class.front | class.Incl)*))?)
            attributes.front =
              attributes.class.global,
              attributes.class.declaring,
              [ a:defaultValue = "front" ] attribute TEIform { text }?
            # [DDSTPAGE] 22.5: Tags for title pages
            titlePage = element titlePage { content.titlePage }
            content.titlePage =
              attributes.titlePage,
              (class.Incl*,
               class.tpParts,
               (class.tpParts | class.Incl)*)
            attributes.titlePage =
              attributes.class.global,
              attribute type { datatype.Text }?,
              [ a:defaultValue = "titlePage" ]
              attribute TEIform { text }?
            class.front |= titlePage
            docTitle = element docTitle { content.docTitle }
            content.docTitle =
              attributes.docTitle,
              (class.Incl*, (titlePart, class.Incl*)+)
            attributes.docTitle =
              attributes.class.global,
              [ a:defaultValue = "docTitle" ]
              attribute TEIform { text }?
            class.tpParts |= docTitle
            class.fmchunk |= docTitle
            titlePart = element titlePart { content.titlePart }
            content.titlePart = attributes.titlePart, macro.paraContent
            attributes.titlePart =
              attributes.class.global,
              [ a:defaultValue = "main" ]
              attribute type { datatype.Text }?,
              [ a:defaultValue = "titlePart" ]
              attribute TEIform { text }?
            class.tpParts |= titlePart
            class.fmchunk |= titlePart
            docAuthor = element docAuthor { content.docAuthor }
            content.docAuthor = attributes.docAuthor, macro.phraseSeq
            attributes.docAuthor =
              attributes.class.global,
              [ a:defaultValue = "docAuthor" ]
              attribute TEIform { text }?
            class.tpParts |= docAuthor
            class.divtop |= docAuthor
            class.fmchunk |= docAuthor
            imprimatur = element imprimatur { content.imprimatur }
            content.imprimatur =
              attributes.imprimatur, macro.paraContent
            attributes.imprimatur =
              attributes.class.global,
              [ a:defaultValue = "imprimatur" ]
              attribute TEIform { text }?
            class.tpParts |= imprimatur
            docEdition = element docEdition { content.docEdition }
            content.docEdition =
              attributes.docEdition, macro.paraContent
            attributes.docEdition =
              attributes.class.global,
              [ a:defaultValue = "docEdition" ]
              attribute TEIform { text }?
            class.tpParts |= docEdition
            class.fmchunk |= docEdition
            docImprint = element docImprint { content.docImprint }
            content.docImprint =
              attributes.docImprint,
              (text
               | class.phrase
               | pubPlace
               | docDate
               | publisher
               | class.Incl)*
            attributes.docImprint =
              attributes.class.global,
              [ a:defaultValue = "docImprint" ]
              attribute TEIform { text }?
            class.tpParts |= docImprint
            class.fmchunk |= docImprint
            docDate = element docDate { content.docDate }
            content.docDate = attributes.docDate, macro.phraseSeq
            attributes.docDate =
              attributes.class.global,
              attribute value { datatype.Date }?,
              [ a:defaultValue = "docDate" ] attribute TEIform { text }?
            class.tpParts |= docDate
            class.divtop |= docDate
            class.fmchunk |= docDate
            #  end of [DDSTPAGE]  22.5
            
            #  end of [DDSFRONT]  22.5
            
          }
        }
        # Back matter is defined in TEI.back file.
        div {
          # include "backmatter.rng"
          div {
            # Text Encoding Initiative Consortium:
            # Guidelines for Electronic Text Encoding and Interchange.
            # TEI P5 (unofficial)
            # Copyright (c) 2003 TEI Consortium. Permission to copy in any form
            # is granted, provided this notice is included in all copies.
            # These materials may not be altered; modifications to these schemata should
            # be performed only as specified by the Guidelines, for example in the
            # chapter entitled 'Modifying the TEI DTD'
            # These materials are subject to revision by the TEI Consortium. Current versions
            # are available from the Consortium website at http://www.tei-c.org
            # TEI P5 Relax NG Schema generated 
            # 2004-01-27T14:25:12Z
            # by relaxGen.xsl.
            
            # [DDSBACK] 22.6: Tags for Back Matter
            back = element back { content.back }
            content.back =
              attributes.back,
              ((class.front | class.Incl)*,
               ((class.divtop, (class.divtop | titlePage | class.Incl)*)
                | (\div, (\div | class.front | class.Incl)*)
                | (div1, (div1 | class.front | class.Incl)*))?,
               (trailer | closer)*)
            attributes.back =
              attributes.class.global,
              attributes.class.declaring,
              [ a:defaultValue = "back" ] attribute TEIform { text }?
            #  end of [DDSBACK]  22.6
            
          }
        }
        #  end of [DDS]  22.7
        
      }
    }
    #  end of [DSTCBGN]  3.4
    
  }
}
div {
  # include "/TEI/web/P5/Schema/figures.rng"
  div {
    # Text Encoding Initiative Consortium:
    # Guidelines for Electronic Text Encoding and Interchange.
    # TEI P5 (unofficial)
    # Copyright (c) 2003 TEI Consortium. Permission to copy in any form
    # is granted, provided this notice is included in all copies.
    # These materials may not be altered; modifications to these schemata should
    # be performed only as specified by the Guidelines, for example in the
    # chapter entitled 'Modifying the TEI DTD'
    # These materials are subject to revision by the TEI Consortium. Current versions
    # are available from the Consortium website at http://www.tei-c.org
    # TEI P5 Relax NG Schema generated 
    # 2004-01-27T14:25:16Z
    # by relaxGen.xsl.
    
    # [DFTPE] 77.2: Formula Content
    formulaNotations = text
    datatype.Formula = text
    #  end of [DFTPE]  77.2
    
    # [DFTFF] 77.: Tables, Formulae, Figures
    
    # [DFTTAB] 77.1.1: Tables
    table = element table { content.table }
    content.table =
      attributes.table,
      ((head | class.Incl)*, (row, class.Incl*)+)
    attributes.table =
      attributes.class.global,
      attribute rows { datatype.NonNegativeInteger }?,
      attribute cols { datatype.NonNegativeInteger }?,
      [ a:defaultValue = "table" ] attribute TEIform { text }?
    class.inter |= table
    class.common |= table
    row = element row { content.row }
    content.row =
      attributes.row,
      ((cell | table), class.Incl*)+
    attributes.row =
      attributes.class.global,
      [ a:defaultValue = "data" ] attribute role { datatype.Text }?,
      [ a:defaultValue = "row" ] attribute TEIform { text }?
    cell = element cell { content.cell }
    content.cell = attributes.cell, macro.paraContent
    attributes.cell =
      attributes.class.global,
      [ a:defaultValue = "data" ] attribute role { datatype.Text }?,
      [ a:defaultValue = "1" ]
      attribute rows { datatype.NonNegativeInteger }?,
      [ a:defaultValue = "1" ]
      attribute cols { datatype.NonNegativeInteger }?,
      [ a:defaultValue = "cell" ] attribute TEIform { text }?
    #  end of [DFTTAB]  77.1.1
    
    # [DFTFOR] 77.2: Formulae
    formula = element formula { content.formula }
    content.formula = attributes.formula, datatype.Formula
    attributes.formula =
      attributes.class.global,
      attribute notation { formulaNotations }?,
      [ a:defaultValue = "formula" ] attribute TEIform { text }?
    class.phrase |= formula
    #  end of [DFTFOR]  77.2
    
    # [DFTGRA] 77.3: Figures
    figure = element figure { content.figure }
    content.figure =
      attributes.figure,
      (class.Incl*,
       (head, class.Incl*)?,
       (p, class.Incl*)*,
       (figDesc, class.Incl*)?,
       (\text, class.Incl*)?)
    attributes.figure =
      attributes.class.global,
      attribute entity { datatype.Entity }?,
      attribute url { datatype.AnyURI }?,
      attribute width { datatype.Text }?,
      attribute height { datatype.Text }?,
      attribute scale { datatype.Text }?,
      [ a:defaultValue = "figure" ] attribute TEIform { text }?
    class.inter |= figure
    class.tpParts |= figure
    class.common |= figure
    figDesc = element figDesc { content.figDesc }
    content.figDesc = attributes.figDesc, macro.paraContent
    attributes.figDesc =
      attributes.class.global,
      [ a:defaultValue = "figDesc" ] attribute TEIform { text }?
    #  end of [DFTGRA]  77.3
    
    #  end of [DFTFF]  77.
    
  }
}
div {
  # include "/TEI/web/P5/Schema/linking.rng"
  div {
    # Text Encoding Initiative Consortium:
    # Guidelines for Electronic Text Encoding and Interchange.
    # TEI P5 (unofficial)
    # Copyright (c) 2003 TEI Consortium. Permission to copy in any form
    # is granted, provided this notice is included in all copies.
    # These materials may not be altered; modifications to these schemata should
    # be performed only as specified by the Guidelines, for example in the
    # chapter entitled 'Modifying the TEI DTD'
    # These materials are subject to revision by the TEI Consortium. Current versions
    # are available from the Consortium website at http://www.tei-c.org
    # TEI P5 Relax NG Schema generated 
    # 2004-01-27T14:25:17Z
    # by relaxGen.xsl.
    
    # [DSAENTS] 63.: Global attributes for the TEI.linking tag set
    
    # When tag set TEI.linking is used, the following attributes
    # may be attached to any element:
    attributes.class.linking |=
      attribute corresp { datatype.IDrefs }?,
      attribute synch { datatype.IDrefs }?,
      attribute sameAs { datatype.IDref }?,
      attribute copyOf { datatype.IDref }?,
      attribute next { datatype.IDref }?,
      attribute prev { datatype.IDref }?,
      attribute exclude { datatype.IDrefs }?,
      attribute select { datatype.IDrefs }?
    # The following attributes apply to all pointer
    # elements:
    attributes.class.pointer |=
      attribute type { datatype.Text }?,
      attribute resp { datatype.Text }?,
      attribute crdate { datatype.Date }?,
      attribute targType { datatype.Text }?,
      [ a:defaultValue = "unknown" ]
      attribute targOrder { datatype.UBoolean }?,
      attribute evaluate { "all" | "one" | "none" }?
    # The following attributes apply to all pointer group
    # elements:
    attributes.class.pointerGroup |=
      attributes.class.pointer,
      attribute domains { datatype.IDrefs }?,
      attribute targFunc { datatype.NMtokens }?
    #  end of [DSAENTS]  63.
    
    # [DSA] 63.: Linking, Segmentation and Alignment
    
    # [DSAPT] 63.1.3: Links
    link = element link { content.link }
    content.link = attributes.link, empty
    attributes.link =
      attributes.class.global,
      attributes.class.pointer,
      attribute targets { datatype.IDrefs },
      [ a:defaultValue = "link" ] attribute TEIform { text }?
    class.metadata |= link
    linkGrp = element linkGrp { content.linkGrp }
    content.linkGrp = attributes.linkGrp, (link | ptr | xptr)+
    attributes.linkGrp =
      attributes.class.global,
      attributes.class.pointerGroup,
      [ a:defaultValue = "linkGrp" ] attribute TEIform { text }?
    class.metadata |= linkGrp
    #  end of [DSAPT]  63.1.3
    
    # [DSAXR] 63.2.1: Extended pointers
    xref = element xref { content.xref }
    content.xref = attributes.xref, macro.paraContent
    attributes.xref =
      attributes.class.global,
      attributes.class.xPointer,
      [ a:defaultValue = "xref" ] attribute TEIform { text }?
    class.loc |= xref
    xptr = element xptr { content.xptr }
    content.xptr = attributes.xptr, empty
    attributes.xptr =
      attributes.class.global,
      attributes.class.xPointer,
      [ a:defaultValue = "xptr" ] attribute TEIform { text }?
    class.loc |= xptr
    #  end of [DSAXR]  63.2.1
    
    # [DSASA] 63.3: Blocks, Segments and Anchors
    anchor = element anchor { content.anchor }
    content.anchor = attributes.anchor, empty
    attributes.anchor =
      attributes.class.global,
      attributes.class.typed,
      [ a:defaultValue = "anchor" ] attribute TEIform { text }?
    class.Incl |= anchor
    seg = element seg { content.seg }
    content.seg = attributes.seg, macro.paraContent
    attributes.seg =
      attributes.class.global,
      attributes.class.seg,
      attribute subtype { datatype.Text }?,
      [ a:defaultValue = "seg" ] attribute TEIform { text }?
    class.segment |= seg
    class.seg |= seg
    ab = element ab { content.ab }
    content.ab = attributes.ab, macro.paraContent
    attributes.ab =
      attributes.class.global,
      attributes.class.typed,
      [ a:defaultValue = "N" ]
      attribute part { "Y" | "N" | "I" | "M" | "F" }?,
      [ a:defaultValue = "ab" ] attribute TEIform { text }?
    class.segment |= ab
    class.chunk |= ab
    #  end of [DSASA]  63.3
    
    # [DSASYMP] 63.5.2: Temporal specification
    when = element when { content.when }
    content.when = attributes.when, empty
    attributes.when =
      attributes.class.global,
      attribute absolute { datatype.Time }?,
      attribute unit { datatype.Text }?,
      attribute interval { datatype.Text }?,
      attribute since { datatype.IDref }?,
      [ a:defaultValue = "when" ] attribute TEIform { text }?
    timeline = element timeline { content.timeline }
    content.timeline = attributes.timeline, when+
    attributes.timeline =
      attributes.class.global,
      attribute origin { datatype.IDref },
      attribute unit { datatype.NMtoken }?,
      attribute interval { datatype.Text }?,
      [ a:defaultValue = "timeline" ] attribute TEIform { text }?
    class.metadata |= timeline
    #  end of [DSASYMP]  63.5.2
    
    # [DSAAG] 63.7: Aggregation
    join = element join { content.join }
    content.join = attributes.join, empty
    attributes.join =
      attributes.class.global,
      attributes.class.pointer,
      attribute targets { datatype.IDrefs },
      attribute result { datatype.Text }?,
      attribute desc { datatype.Text }?,
      [ a:defaultValue = "root" ]
      attribute scope { "root" | "branches" }?,
      [ a:defaultValue = "join" ] attribute TEIform { text }?
    class.metadata |= join
    joinGrp = element joinGrp { content.joinGrp }
    content.joinGrp = attributes.joinGrp, (join | ptr | xptr)*
    attributes.joinGrp =
      attributes.class.global,
      attributes.class.pointerGroup,
      attribute result { datatype.Text }?,
      attribute desc { datatype.Text }?,
      [ a:defaultValue = "joinGrp" ] attribute TEIform { text }?
    class.metadata |= joinGrp
    #  end of [DSAAG]  63.7
    
    # [DSAAT] 63.8: Alternation
    alt = element alt { content.alt }
    content.alt = attributes.alt, empty
    attributes.alt =
      attributes.class.global,
      attributes.class.pointer,
      attribute targets { datatype.IDrefs },
      attribute mode { "excl" | "incl" }?,
      attribute weights { datatype.Text }?,
      attribute wScale { "perc" | "real" }?,
      [ a:defaultValue = "alt" ] attribute TEIform { text }?
    class.complexVal |= alt
    class.metadata |= alt
    altGrp = element altGrp { content.altGrp }
    content.altGrp = attributes.altGrp, (alt | ptr | xptr)*
    attributes.altGrp =
      attributes.class.global,
      attributes.class.pointerGroup,
      [ a:defaultValue = "excl" ] attribute mode { "excl" | "incl" }?,
      [ a:defaultValue = "perc" ] attribute wScale { "perc" | "real" }?,
      [ a:defaultValue = "altGrp" ] attribute TEIform { text }?
    class.metadata |= altGrp
    #  end of [DSAAT]  63.8
    
    #  end of [DSA]  63.
    
  }
}
div {
  # include "/TEI/web/P5/Schema/analysis.rng"
  div {
    # Text Encoding Initiative Consortium:
    # Guidelines for Electronic Text Encoding and Interchange.
    # TEI P5 (unofficial)
    # Copyright (c) 2003 TEI Consortium. Permission to copy in any form
    # is granted, provided this notice is included in all copies.
    # These materials may not be altered; modifications to these schemata should
    # be performed only as specified by the Guidelines, for example in the
    # chapter entitled 'Modifying the TEI DTD'
    # These materials are subject to revision by the TEI Consortium. Current versions
    # are available from the Consortium website at http://www.tei-c.org
    # TEI P5 Relax NG Schema generated 
    # 2004-01-27T14:25:12Z
    # by relaxGen.xsl.
    
    # [DAIENT] 69.: Modifications to TEI class system for analysis
    
    # [DAIGA] 69.2: Global attribute for analysis
    attributes.class.analysis |= attribute ana { datatype.IDrefs }?
    #  end of [DAIGA]  69.2
    
    #  end of [DAIENT]  69.
    
    # [DAI] 69.: Simple analytic mechanisms
    
    # We declare the various elements, group by group.
    
    # [DAISP] 69.3: Spans
    span = element span { content.span }
    content.span = attributes.span, empty
    attributes.span =
      attributes.class.global,
      attributes.class.interpret,
      attribute value { datatype.Text },
      attribute from { datatype.IDref },
      attribute to { datatype.IDref }?,
      [ a:defaultValue = "span" ] attribute TEIform { text }?
    class.metadata |= span
    spanGrp = element spanGrp { content.spanGrp }
    content.spanGrp = attributes.spanGrp, span*
    attributes.spanGrp =
      attributes.class.global,
      attributes.class.interpret,
      [ a:defaultValue = "spanGrp" ] attribute TEIform { text }?
    class.metadata |= spanGrp
    interp = element interp { content.interp }
    content.interp = attributes.interp, empty
    attributes.interp =
      attributes.class.global,
      attributes.class.interpret,
      attribute value { datatype.Text },
      [ a:defaultValue = "interp" ] attribute TEIform { text }?
    class.metadata |= interp
    interpGrp = element interpGrp { content.interpGrp }
    content.interpGrp = attributes.interpGrp, interp*
    attributes.interpGrp =
      attributes.class.global,
      attributes.class.interpret,
      [ a:defaultValue = "interpGrp" ] attribute TEIform { text }?
    class.metadata |= interpGrp
    #  end of [DAISP]  69.3
    
    # [DAILC] 69.1: Linguistic Segment Categories
    s = element s { content.s }
    content.s = attributes.s, macro.phraseSeq
    attributes.s =
      attributes.class.global,
      attributes.class.seg,
      [ a:defaultValue = "s" ] attribute TEIform { text }?
    class.seg |= s
    cl = element cl { content.cl }
    content.cl = attributes.cl, macro.phraseSeq
    attributes.cl =
      attributes.class.global,
      attributes.class.seg,
      [ a:defaultValue = "cl" ] attribute TEIform { text }?
    class.seg |= cl
    phr = element phr { content.phr }
    content.phr = attributes.phr, macro.phraseSeq
    attributes.phr =
      attributes.class.global,
      attributes.class.seg,
      [ a:defaultValue = "phr" ] attribute TEIform { text }?
    class.seg |= phr
    w = element w { content.w }
    content.w =
      attributes.w, (text | class.segment | w | m | c | class.Incl)*
    attributes.w =
      attributes.class.global,
      attributes.class.seg,
      attribute lemma { datatype.Text }?,
      [ a:defaultValue = "w" ] attribute TEIform { text }?
    class.seg |= w
    m = element m { content.m }
    content.m = attributes.m, (text | class.segment | c | class.Incl)*
    attributes.m =
      attributes.class.global,
      attributes.class.seg,
      attribute baseform { datatype.Text }?,
      [ a:defaultValue = "m" ] attribute TEIform { text }?
    class.seg |= m
    c = element c { content.c }
    content.c = attributes.c, text
    attributes.c =
      attributes.class.global,
      attributes.class.seg,
      [ a:defaultValue = "c" ] attribute TEIform { text }?
    class.seg |= c
    #  end of [DAILC]  69.1
    
    #  end of [DAI]  69.
    
  }
}
