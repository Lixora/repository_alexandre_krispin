namespace a1 = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace rng = "http://relaxng.org/ns/structure/1.0"

# Schema generated 2007-03-13T16:02:29Z..
# Copyright 2005 TEI Consortium.
# This is free software; you can redistribute it and/or
#	    modify it under the terms of the GNU General Public
#	    License as published by the Free Software Foundation;
#	    either version 2 of the License, or (at your option) any
#	    later version.
# This material is distributed in the hope that it will be
#	    useful, but WITHOUT ANY WARRANTY; without even the implied
#	    warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
#	    PURPOSE. See the GNU General Public License for more
#	    details.
# You should have received a copy of the GNU General Public
#	    License along with this file; if not, write to the Free
#	    Software Foundation, Inc., 59 Temple Place, Suite 330,
#	    Boston, MA 02111-1307, USA.
# To contact the TEI Consortium use the following addresses.
#	    For general (non-technical) enquiries: 
#		  target="mailto:info@tei-c.org"/>info@tei-c.orgFor membership enquiries: membership@tei-c.orgFor technical enquiries, particularly about the
#		Guidelines, DTDs, schemas, or software available from
#		the TEI-C: editors@tei-c.orgFor up to date information, consult the TEI web site at http://www.tei-c.org/P5Names and dates

# Definitions from module namesdates

# Set global predeclared macros

# Set predeclared macros

# 0. predeclared macros

# 1. classes
model.persNamePart =
  surname | forename | genName | nameLink | addName | roleName
model.persNamePart_sequence =
  surname, forename, genName, nameLink, addName, roleName
model.persNamePart_sequenceOptional =
  surname?, forename?, genName?, nameLink?, addName?, roleName?
model.persNamePart_sequenceOptionalRepeatable =
  surname*, forename*, genName*, nameLink*, addName*, roleName*
model.persNamePart_sequenceRepeatable =
  surname+, forename+, genName+, nameLink+, addName+, roleName+
att.personal.attributes =
  att.personal.attribute.type,
  att.personal.attribute.full,
  att.personal.attribute.sort,
  empty
att.personal.attribute.type =
  ## provides more culture- linguistic- or application- specific
  ## information used to categorize this name component.
  attribute type { data.enumerated }?
att.personal.attribute.full =
  ## indicates whether the name component is given in full, as an
  ## abbreviation or simply as an initial.
  [ a1:defaultValue = "yes" ]
  attribute full {
    ## (the name component is spelled out in full.) 
    "yes" | ## (the name component is given in an
      ## abbreviated form.) 
      "abb" | ## (the name component is indicated only by
      ## one initial.) 
      "init"
  }?
att.personal.attribute.sort =
  ## specifies the sort order of the name component in relation
  ## to others within the personal name.
  attribute sort { xsd:nonNegativeInteger }?
# 2. elements

addName =
  ## (additional name) contains an additional name component, such as a nickname, 
  ## epithet, or alias, or any other descriptive phrase used within a
  ## personal name.
  element addName { addName.content, addName.attributes }
addName.content = macro.phraseSeq
addName.attributes =
  att.global.attributes, att.personal.attributes, empty

affiliation =
  ## (affiliation) contains an informal description of a person's present
  ## or past affiliation with some
  ## organization, for example an employer or sponsor.
  element affiliation { affiliation.content, affiliation.attributes }
affiliation.content = macro.phraseSeq
affiliation.attributes =
  att.global.attributes,
  att.editLike.attributes,
  att.datable.attributes,
  att.naming.attributes,
  empty

age =
  ## specifies the age of a person.
  element age { age.content, age.attributes }
age.content = macro.phraseSeq
age.attributes =
  att.global.attributes,
  att.editLike.attributes,
  att.datable.attributes,
  ## supplies a numeric code representing the age or age group
  attribute value { data.count }?,
  empty

birth =
  ## (Birth details) contains information about a person's birth, such as its date
  ## and place.
  element birth { birth.content, birth.attributes }
birth.content = macro.phraseSeq
birth.attributes =
  att.global.attributes,
  att.editLike.attributes,
  att.datable.attributes,
  att.naming.attributes,
  ## specifies the date of birth in a W3C standard form (YYYY-MM-DD).
  attribute date { data.temporal }?,
  empty

bloc =
  ## (bloc) contains the name of a geo-political unit consisting of  two or
  ## more nation states or countries.
  element bloc { bloc.content, bloc.attributes }
bloc.content = macro.phraseSeq
bloc.attributes =
  att.global.attributes,
  att.naming.attributes,
  att.typed.attributes,
  empty

country =
  ## (country) contains the name of a geo-political unit, such as a nation,
  ## country, colony, or commonwealth, larger than or administratively superior
  ## to a region and smaller than a bloc.
  element country { country.content, country.attributes }
country.content = macro.phraseSeq
country.attributes =
  att.global.attributes,
  att.naming.attributes,
  att.typed.attributes,
  ## supplies a regularized form of the country name using a
  ##	name or	code from ISO 3166
  attribute reg { data.code }?,
  empty

death =
  ## contains information about a person's death, such as its date
  ## and place.
  element death { death.content, death.attributes }
death.content = macro.phraseSeq
death.attributes =
  att.global.attributes,
  att.editLike.attributes,
  att.datable.attributes,
  att.naming.attributes,
  ## specifies the date of death in a W3C standard form (YYYY-MM-DD).
  attribute date { data.temporal }?,
  empty

distance =
  ## (distance) that part of a relative temporal or spatial expression which indicates
  ## the distance between the place or time denoted by it and the place or
  ## time referred to within it.
  element distance { distance.content, distance.attributes }
distance.content = macro.phraseSeq
distance.attributes =
  att.global.attributes,
  att.datePart.attributes,
  att.typed.attributes,
  ## indicates the degree
  ## of accuracy associated with the
  ## distance.
  [ a1:defaultValue = "unknown" ]
  attribute exact {
    ## (The distance is exact.) 
    "true" | ## (The distance is approximate.) 
      "false" | ## (Accuracy unavailable or unknown.) 
      "unknown"
  }?,
  empty

district =
  ## contains the name of any kind of subdivision of a
  ## settlement,  such as a parish, ward, or other
  ## administrative or geographic unit.
  element district { district.content, district.attributes }
district.content = macro.phraseSeq
district.attributes =
  att.global.attributes,
  att.naming.attributes,
  att.typed.attributes,
  empty

education =
  ## contains a description of the
  ## educational experience of a person.
  element education { education.content, education.attributes }
education.content = macro.phraseSeq
education.attributes =
  att.global.attributes,
  att.editLike.attributes,
  att.datable.attributes,
  att.naming.attributes,
  empty

faith =
  ## specifies the faith,  religion, or belief set of a person.
  element faith { faith.content, faith.attributes }
faith.content = macro.phraseSeq
faith.attributes =
  att.global.attributes,
  att.editLike.attributes,
  att.datable.attributes,
  empty

floruit =
  ## contains information about a person's period of activity.
  element floruit { floruit.content, floruit.attributes }
floruit.content = macro.phraseSeq
floruit.attributes =
  att.global.attributes,
  att.datable.attributes,
  att.editLike.attributes,
  empty

forename =
  ## (forename) contains a forename, given or baptismal name.
  element forename { forename.content, forename.attributes }
forename.content = macro.phraseSeq
forename.attributes =
  att.global.attributes, att.personal.attributes, empty

genName =
  ## contains a name component used to distinguish otherwise similar
  ## names on the basis of the relative ages or generations of the persons named.
  element genName { genName.content, genName.attributes }
genName.content = macro.phraseSeq
genName.attributes =
  att.global.attributes, att.personal.attributes, empty

geog =
  ## (geographical feature name) contains a common noun identifying some geographical feature 
  ## contained within a geographic name, such as valley,
  ## mount etc.
  element geog { geog.content, geog.attributes }
geog.content = macro.xtext
geog.attributes =
  att.global.attributes,
  att.naming.attributes,
  att.typed.attributes,
  empty

geogName =
  ## (geographical name) a name associated with some geographical feature such as
  ##   Windrush Valley or Mount Sinai.
  element geogName { geogName.content, geogName.attributes }
geogName.content =
  (text | model.gLike | geog | model.nameLike | model.global)*
geogName.attributes =
  att.global.attributes,
  att.naming.attributes,
  ## provides more culture- linguistic- or application-
  ##       specific information used to categorize this name
  ##       component.
  attribute type { data.enumerated }?,
  empty

langKnowledge =
  ## summarizes the state of a person's linguistic knowledge, either
  ## as prose or by a list of langKnown elements.
  element langKnowledge {
    langKnowledge.content, langKnowledge.attributes
  }
langKnowledge.content = model.pLike | langKnown+
langKnowledge.attributes =
  att.global.attributes,
  att.datable.attributes,
  att.editLike.attributes,
  ## supplies one or more valid language tags for the languages
  ##       specified
  attribute tags {
    list { data.language+ }
  }?,
  empty

langKnown =
  ## (linguistic competence) summarizes the state of a person's knowledge of a single language.
  element langKnown { langKnown.content, langKnown.attributes }
langKnown.content = macro.phraseSeq
langKnown.attributes =
  att.global.attributes,
  att.datable.attributes,
  att.editLike.attributes,
  ## supplies a  valid language tag for the language concerned.
  attribute tag { data.language },
  ## a code indicating the person's level of knowledge for this language 
  attribute level { data.code }?,
  empty

listPerson =
  ## contains a list of descriptions, each of which provides
  ## information about an identifiable person or a group of people, for
  ## example the participants in a language interaction, or the people referred
  ## to in a historical source. 
  element listPerson { listPerson.content, listPerson.attributes }
listPerson.content =
  model.pLike+
  | ((person | personGrp)+, particLinks?)
listPerson.attributes =
  att.global.attributes,
  att.typed.attributes,
  att.declarable.attributes,
  empty

nameLink =
  ## (name link) contains a connecting phrase or link used within a name but not
  ## regarded as part of it, such as  van der or of.
  element nameLink { nameLink.content, nameLink.attributes }
nameLink.content = macro.phraseSeq
nameLink.attributes =
  att.global.attributes, att.personal.attributes, empty

nationality =
  ## contains an informal description of a person's present
  ## or past nationality or citizenship.
  element nationality { nationality.content, nationality.attributes }
nationality.content = macro.phraseSeq
nationality.attributes =
  att.global.attributes,
  att.datable.attributes,
  att.editLike.attributes,
  att.naming.attributes,
  ## supplies a regularized form of the country name using a
  ##	name or	code from ISO 3166
  attribute reg { data.code }?,
  empty

occupation =
  ## contains an informal description of a person's trade,
  ## profession or occupation.
  element occupation { occupation.content, occupation.attributes }
occupation.content = macro.phraseSeq
occupation.attributes =
  att.global.attributes,
  att.datable.attributes,
  att.editLike.attributes,
  att.naming.attributes,
  ## identifies the classification system or taxonomy in use by supplying
  ## the identifier of a taxonomy element elsewhere in the header.
  attribute scheme { data.pointer }?,
  ## identifies an occupation code defined within the
  ## classification system or taxonomy defined by the scheme
  ## attribute.
  attribute code { data.pointer }?,
  empty

offset =
  ## (offset) that  part of a relative temporal or spatial expression
  ## which indicates the direction of the offset between the two place
  ## names, dates, or times involved in the expression. 
  element offset { offset.content, offset.attributes }
offset.content = (text | model.gLike | model.global)*
offset.attributes = att.global.attributes, att.typed.attributes, empty

orgDivn =
  ## (organizational division) indicates a division, branch or department specified
  ## in an organizational name.
  element orgDivn { orgDivn.content, orgDivn.attributes }
orgDivn.content = macro.phraseSeq
orgDivn.attributes =
  att.global.attributes,
  ## more fully describes the organization division specified in the
  ## name component.
  ## Possible values include branch, department,
  ## section,
  ## division, etc.
  attribute type { data.enumerated }?,
  ## gives a normalized or regularized form of the organizational
  ## division.
  attribute reg { text }?,
  empty

orgName =
  ## (organization name) contains an organizational name. 
  element orgName { orgName.content, orgName.attributes }
orgName.content =
  (text
   | model.gLike
   | orgTitle
   | orgType
   | orgDivn
   | model.phrase
   | model.global)*
orgName.attributes =
  att.global.attributes,
  ## more fully describes the organization indicated in the
  ##       organizational name. Possible values include voluntary,
  ##       political, governmental, industrial,
  ##       commercial, etc.
  attribute type { data.enumerated }?,
  ## provides an alternative identifier for the organization
  ##       being named, such as a database record key.
  attribute key { data.key }?,
  ## gives a normalized or regularized form of the organization name
  attribute reg { text }?,
  empty

orgTitle =
  ## (organization title) contains the proper name component of an organizational
  ## name. 
  element orgTitle { orgTitle.content, orgTitle.attributes }
orgTitle.content = macro.phraseSeq
orgTitle.attributes =
  att.global.attributes,
  ## more fully describes the organization title. Possible values
  ## include formal,
  ## colloquial, acronym, etc.
  attribute type { data.enumerated }?,
  ## gives a normalized or regularized form of the organization title.
  attribute reg { text }?,
  empty

orgType =
  ## (organization type) indicates a part of the organization name which contains
  ## information about the organization's structure or function.
  element orgType { orgType.content, orgType.attributes }
orgType.content = macro.phraseSeq
orgType.attributes =
  att.global.attributes,
  ## more fully describes the organization type specified in the name
  ## component.  Possible values include function, structure,
  ## etc.
  attribute type { data.enumerated }?,
  ## gives a normalized or regularized form of the organization type
  attribute reg { text }?,
  empty

particLinks =
  ## (participant relationships) describes the relationships or social links existing between
  ## participants in a linguistic interaction. 
  element particLinks { particLinks.content, particLinks.attributes }
particLinks.content = model.pLike+ | relation+
particLinks.attributes = att.global.attributes, empty

persEvent =
  ## contains a description of a particular event of significance in
  ## the life of  a person.
  element persEvent { persEvent.content, persEvent.attributes }
persEvent.content =
  label?,
  model.dateLike?,
  placeName?,
  model.pLike*,
  (model.noteLike | model.biblLike)*
persEvent.attributes =
  att.global.attributes,
  att.datable.attributes,
  att.editLike.attributes,
  att.typed.attributes,
  att.naming.attributes,
  empty

persName =
  ## (personal name) contains a proper noun or proper-noun phrase referring to a
  ##   person, possibly including any or all of the person's forenames,
  ##   surnames, honorifics, added names, etc.
  element persName { persName.content, persName.attributes }
persName.content =
  (text
   | model.gLike
   | model.persNamePart
   | model.phrase
   | model.global)*
persName.attributes =
  att.global.attributes,
  att.datable.attributes,
  att.editLike.attributes,
  att.naming.attributes,
  ## describes the personal name more fully using an open-ended
  ##       list of words or phrases which help to indicate the function,
  ##       e.g. married name, maiden name, pen name,
  ##       religious name, etc.
  attribute type { data.enumerated }?,
  empty

persState =
  ## contains a description of some ongoing status or quality
  ## attributed to a person.
  element persState { persState.content, persState.attributes }
persState.content =
  label?,
  model.dateLike?,
  model.pLike*,
  (model.noteLike | model.biblLike)*
persState.attributes =
  att.global.attributes,
  att.datable.attributes,
  att.editLike.attributes,
  att.typed.attributes,
  att.naming.attributes,
  empty

persTrait =
  ## contains a description of a personal or culturally-determined characteristic
  ## attributed to a person.
  element persTrait { persTrait.content, persTrait.attributes }
persTrait.content =
  label?,
  model.dateLike?,
  model.pLike*,
  (model.noteLike | model.biblLike)*
persTrait.attributes =
  att.global.attributes,
  att.datable.attributes,
  att.editLike.attributes,
  att.naming.attributes,
  att.typed.attributes,
  empty

person =
  ## provides information about an identifiable individual, for
  ## example a participant in a language interaction, or a person referred
  ## to in a historical source.
  element person { person.content, person.attributes }
person.content = model.pLike+ | (model.personPart | model.global)*
person.attributes =
  att.global.attributes,
  ## specifies a primary role or classification for the person.
  attribute role {
    list { data.word+ }
  }?,
  ## specifies the sex of the person.
  attribute sex { data.sex }?,
  ## specifies an age group for the person.
  attribute age { data.word }?,
  empty

personGrp =
  ## (personal group) describes a group of individuals treated as a single person for
  ##   analytic purposes.
  element personGrp { personGrp.content, personGrp.attributes }
personGrp.content = model.pLike+ | model.personPart*
personGrp.attributes =
  att.global.attributes,
  ## specifies the role of this group of participants in the
  ##         interaction.
  attribute role { data.code }?,
  ## specifies the sex of the participant group.
  attribute sex { data.sex | "mixed" }?,
  ## specifies the age group of the participants.
  attribute age { data.word }?,
  ## specifies the size or approximate size of the group.
  attribute size {
    list { data.word+ }
  }?,
  empty

placeName =
  ## contains an absolute or relative place name. 
  element placeName { placeName.content, placeName.attributes }
placeName.content =
  (text
   | model.gLike
   | model.placeNamePart
   | model.phrase
   | model.global)*
placeName.attributes =
  att.global.attributes, att.naming.attributes, empty

region =
  ## (region) contains the name of an administrative unit such as a state,
  ## province, or county, larger than a settlement, but smaller than a country.
  element region { region.content, region.attributes }
region.content = macro.phraseSeq
region.attributes =
  att.global.attributes,
  att.naming.attributes,
  att.typed.attributes,
  empty

relation =
  ## (relationship) describes any kind of relationship or linkage amongst a specified
  ## group of participants.
  element relation { relation.content, relation.attributes }
relation.content = desc?
relation.attributes =
  att.global.attributes,
  att.datable.attributes,
  att.editLike.attributes,
  att.naming.attributes,
  ## categorizes the relationship in some respect, e.g.
  ## as social, personal or other.
  ## Suggested values include: 1] social (relationship concerned with social roles); 2] personal (relationship concerned with personal roles, e.g.
  ## kinship, marriage, etc.); 3] other (other kinds of relationship)
  [ a1:defaultValue = "personal" ] attribute type { data.enumerated }?,
  ## supplies a name for the kind of  relationship of which
  ##	this is an instance.
  attribute name { data.enumerated },
  (
   ## identifies the active participants in a non-mutual
   ## relationship, or all the participants in a mutual one.
   attribute active {
     list { data.pointer+ }
   } | ## supplies a list of participants amongst all of whom the relationship holds equally.
     attribute mutual {
       list { data.pointer+ }
     })?,
  ## identifies the passive participants in a non-mutual
  ## relationship.
  attribute passive {
    list { data.pointer+ }
  }?,
  empty

residence =
  ## (residence) describes a person's present or past places of residence.
  element residence { residence.content, residence.attributes }
residence.content = macro.phraseSeq
residence.attributes =
  att.global.attributes,
  att.datable.attributes,
  att.editLike.attributes,
  att.naming.attributes,
  empty

roleName =
  ## (roleName) contains a name component which indicates that the referent has a
  ## particular role or position in society, such as an official title or
  ## rank.
  element roleName { roleName.content, roleName.attributes }
roleName.content = macro.phraseSeq
roleName.attributes =
  att.global.attributes, att.personal.attributes, empty

settlement =
  ## contains the name of a settlement such as a city, town, or
  ## village identified as a single geo-political or
  ## administrative unit.
  element settlement { settlement.content, settlement.attributes }
settlement.content = macro.phraseSeq
settlement.attributes =
  att.global.attributes,
  att.naming.attributes,
  att.typed.attributes,
  empty

sex =
  ## specifies the sex of a person.
  element sex { sex.content, sex.attributes }
sex.content = macro.phraseSeq
sex.attributes =
  att.global.attributes,
  att.editLike.attributes,
  att.datable.attributes,
  attribute value { data.sex }?,
  empty

socecStatus =
  ## (socio-economic status) contains an informal description of a person's perceived social or
  ## economic status.
  element socecStatus { socecStatus.content, socecStatus.attributes }
socecStatus.content = macro.phraseSeq
socecStatus.attributes =
  att.global.attributes,
  att.datable.attributes,
  att.editLike.attributes,
  att.naming.attributes,
  ## identifies the classification system or taxonomy in use.
  attribute scheme { data.pointer }?,
  ## identifies a status code defined within the
  ## classification system or taxonomy defined by the source
  ## attribute.
  attribute code { data.pointer }?,
  empty

surname =
  ## (surname) contains a family (inherited) name, as opposed to a given,
  ## baptismal, or nick name.
  element surname { surname.content, surname.attributes }
surname.content = macro.phraseSeq
surname.attributes =
  att.global.attributes, att.personal.attributes, empty
# 3. macros
