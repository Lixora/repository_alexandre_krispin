namespace rng = "http://relaxng.org/ns/structure/1.0"

# Schema generated 2007-03-13T16:02:29Z..
# Copyright 2005 TEI Consortium.
# This is free software; you can redistribute it and/or
#	    modify it under the terms of the GNU General Public
#	    License as published by the Free Software Foundation;
#	    either version 2 of the License, or (at your option) any
#	    later version.
# This material is distributed in the hope that it will be
#	    useful, but WITHOUT ANY WARRANTY; without even the implied
#	    warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
#	    PURPOSE. See the GNU General Public License for more
#	    details.
# You should have received a copy of the GNU General Public
#	    License along with this file; if not, write to the Free
#	    Software Foundation, Inc., 59 Temple Place, Suite 330,
#	    Boston, MA 02111-1307, USA.
# To contact the TEI Consortium use the following addresses.
#	    For general (non-technical) enquiries: 
#		  target="mailto:info@tei-c.org"/>info@tei-c.orgFor membership enquiries: membership@tei-c.orgFor technical enquiries, particularly about the
#		Guidelines, DTDs, schemas, or software available from
#		the TEI-C: editors@tei-c.orgFor up to date information, consult the TEI web site at http://www.tei-c.org/P5Transcription of primary sources

# Definitions from module transcr

# Set global predeclared macros

# Set predeclared macros

# 0. predeclared macros

# 1. classes

# 2. elements

addSpan =
  ## (added span of text) marks the beginning of a longer sequence of text added by an
  ##   author, scribe, annotator or corrector (see also add).
  element addSpan { addSpan.content, addSpan.attributes }
addSpan.content = empty
addSpan.attributes =
  att.global.attributes,
  att.authorialIntervention.attributes,
  att.editLike.attributes,
  att.placement.attributes,
  att.spanning.attributes,
  empty

damage =
  ## contains an area of damage to the text witness.
  element damage { damage.content, damage.attributes }
damage.content = macro.paraContent
damage.attributes =
  att.global.attributes,
  att.editLike.attributes,
  ## classifies the damage according to any convenient typology.
  attribute type { data.enumerated }?,
  ## indicates approximately how much text is in the damaged area,
  ## in letters, minims, inches, or any appropriate unit, where this
  ## cannot be deduced from the contents of the tag.  For example, the
  ## damage may span structural divisions in the text so that the tag must
  ## then be empty of content.
  attribute extent {
    list { data.word+ }
  }?,
  ## In the case of damage (deliberate defacement, etc.) assignable
  ## to an identifiable hand, signifies the hand responsible for the
  ## damage.
  attribute hand { data.pointer }?,
  ## categorizes the cause of the damage, if it can be identified.
  ## Sample values include: 1] rubbing (damage results from rubbing of the
  ##   leaf edges); 2] mildew (damage results from mildew on the leaf surface); 3] smoke (damage results from smoke)
  attribute agent { data.enumerated }?,
  ## Signifies the degree of damage according to a convenient scale.
  ## The damage tag with the degree attribute should
  ## only be used where the text may be read with some confidence; text
  ## supplied from other sources should be tagged as supplied.
  attribute degree { data.probability | data.certainty }?,
  empty

delSpan =
  ## (deleted span of text) marks the beginning of a longer sequence of text deleted,
  ## marked as deleted, or otherwise signaled as superfluous or spurious by an
  ## author, scribe, annotator, or corrector.
  element delSpan { delSpan.content, delSpan.attributes }
delSpan.content = empty
delSpan.attributes =
  att.global.attributes,
  att.editLike.attributes,
  att.authorialIntervention.attributes,
  att.spanning.attributes,
  empty

fw =
  ## (forme work) contains a running head (e.g. a header, footer), catchword, or
  ##   similar material appearing on the current page.
  element fw { fw.content, fw.attributes }
fw.content = macro.phraseSeq
fw.attributes =
  att.global.attributes,
  att.placement.attributes,
  ## classifies the material encoded according to some useful typology.
  ## Sample values include: 1] header (a running title at the top of the page); 2] footer (a running title at the bottom of the page); 3] pag (a page number or foliation symbol); 4] sig (a signature or gathering symbol); 5] catch (a catch-word)
  attribute type { data.enumerated }?,
  empty

hand =
  ## used in the header to define each distinct scribe or
  ## handwriting style.
  element hand { hand.content, hand.attributes }
hand.content = empty
hand.attributes =
  att.global.attributes,
  ## gives the name of,or other identifier for, the scribe.
  attribute scribe { data.code }?,
  ## indicates recognized writing styles.
  attribute style { data.enumerated }?,
  ## indicates dominant language of hand.
  attribute mainLang { data.language }?,
  ## describes tint or type
  ## of ink, e.g. brown.  May also be used to indicate the writing medium, e.g. pencil
  attribute ink { data.enumerated }?,
  ## describes other characteristics of the hand,
  ## particularly those related to the quality of the writing.
  ## Sample values include: 1] shaky (handwriting is shaky); 2] thick (strokes are unusually thick); 3] regular (writing is regular)
  attribute writing { data.enumerated }?,
  ## indicates whether or
  ## not this is the first or main scribe of the document.
  attribute first { data.truthValue }?,
  ## indicates the editor or transcriber responsible for identifying
  ## the hand.
  attribute resp { data.code }?,
  empty

handList =
  ## contains a series of hand elements listing the
  ## different hands of the source.
  element handList { handList.content, handList.attributes }
handList.content = hand*
handList.attributes = att.global.attributes, empty

handShift =
  ## marks the beginning of a sequence of text written in a new
  ## hand, or of a change in the scribe, writing style, ink or character
  ## of the document hand.
  element handShift { handShift.content, handShift.attributes }
handShift.content = empty
handShift.attributes =
  att.global.attributes,
  ## identifies the new hand.
  attribute new { data.code },
  ## identifies the old hand.
  attribute old { data.code }?,
  ## indicates recognized
  ## writing styles.
  attribute style { data.enumerated }?,
  ## describes tint or type
  ## of ink, e.g. brown.  May also be used to indicate the writing medium, e.g. pencil
  attribute ink { data.enumerated }?,
  ## describes other characteristics of the hand,
  ## particularly those related to the quality of the writing.
  ## Sample values include: 1] shaky (handwriting is shaky); 2] thick (strokes are unusually thick); 3] regular (writing is regular)
  attribute writing { data.enumerated }?,
  ## signifies the editor or transcriber responsible for identifying
  ## the change of hand.
  attribute resp { data.code }?,
  empty

restore =
  ## indicates restoration of text to an earlier state by
  ## cancellation of an editorial or authorial marking or instruction.
  element restore { restore.content, restore.attributes }
restore.content = macro.paraContent
restore.attributes =
  att.global.attributes,
  att.editLike.attributes,
  ## characterizes  the means of restoration.
  attribute means { data.code }?,
  ## indicates the action cancelled by the restoration.
  attribute type { data.name }?,
  ## signifies the hand of the agent which made the restoration.
  attribute hand { data.pointer }?,
  empty

space =
  ## indicates the location of a significant space in the copy text.
  element space { space.content, space.attributes }
space.content = empty
space.attributes =
  att.global.attributes,
  ## indicates whether the space is horizontal or vertical.
  attribute dim {
    ## (the space is horizontal.) 
    "horizontal" | ## (the space is vertical.) 
      "vertical"
  }?,
  ## indicates approximately how large the space is, in letters,
  ## minims, inches, or other appropriate unit.
  attribute extent {
    list { data.word+ }
  }?,
  ## indicates the individual responsible for identifying and measuring
  ## the space.
  attribute resp { data.pointer }?,
  empty

supplied =
  ## signifies text supplied by the transcriber or editor in place
  ## of text which cannot be read, either because of physical damage or
  ## loss in the original or because it is illegible for any
  ## reason.
  element supplied { supplied.content, supplied.attributes }
supplied.content = macro.paraContent
supplied.attributes =
  att.global.attributes,
  att.editLike.attributes,
  ## indicates why the text has had to be supplied.
  attribute reason {
    list { data.word+ }
  }?,
  ## where the presumed loss of text leading to the supplying of
  ## text arises from action (partial deletion, etc.) assignable to an
  ## identifiable hand, signifies the hand responsible for the action.
  attribute hand { data.pointer }?,
  ## In the case of text which has been supplied  because of damage, categorizes the cause of the damage, if it can be identified.
  ## Sample values include: 1] rubbing (damage results from rubbing of the
  ##   leaf edges); 2] mildew (damage results from mildew on the leaf surface); 3] smoke (damage results from smoke)
  attribute agent { data.enumerated }?,
  ## states the source of the supplied text.
  attribute source {
    list { data.word+ }
  }?,
  empty
# 3. macros
